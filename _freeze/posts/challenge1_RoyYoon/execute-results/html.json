{
  "hash": "92116a4b48c29937c31daa7a51628a9d",
  "result": {
    "markdown": "---\ntitle: \"Challenge 1 Roy Yoon\"\nauthor: \"Roy Yoon\"\ndesription: \"Reading in data and creating a post\"\ndate: \"08/15/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - birds.csv\n  - submission 2\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n\n## Reading Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nbirds <- read_csv(\"_data/birds.csv\")\n```\n:::\n\n\nAdd any comments or documentation as needed. More challenging data sets may require additional code chunks and documentation.\n\n## A Quick Look at 'birds'\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  Domai…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year Unit \n  <chr>   <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl> <chr>\n1 QA      Live …       2 Afgh…    5112 Stocks     1057 Chic…    1961  1961 1000…\n2 QA      Live …       2 Afgh…    5112 Stocks     1057 Chic…    1962  1962 1000…\n3 QA      Live …       2 Afgh…    5112 Stocks     1057 Chic…    1963  1963 1000…\n4 QA      Live …       2 Afgh…    5112 Stocks     1057 Chic…    1964  1964 1000…\n5 QA      Live …       2 Afgh…    5112 Stocks     1057 Chic…    1965  1965 1000…\n6 QA      Live …       2 Afgh…    5112 Stocks     1057 Chic…    1966  1966 1000…\n# … with 3 more variables: Value <dbl>, Flag <chr>, `Flag Description` <chr>,\n#   and abbreviated variable names ¹​`Domain Code`, ²​`Area Code`,\n#   ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n## Dimensions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#understanding the dimensions of data set 'birds'\ndim(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30977    14\n```\n:::\n:::\n\n\n## Column Names\n\nThere are 30977 rows and 14 column in the data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#column names in  data set 'birds'\n\ncolnames(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Domain Code\"      \"Domain\"           \"Area Code\"        \"Area\"            \n [5] \"Element Code\"     \"Element\"          \"Item Code\"        \"Item\"            \n [9] \"Year Code\"        \"Year\"             \"Unit\"             \"Value\"           \n[13] \"Flag\"             \"Flag Description\"\n```\n:::\n:::\n\n\n## Cases when 'birds' data 'Value' is greater then 10000\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#looking at 'birds' data set that has 'Value' column value greater than 10000\nmore_than_10000 <- filter(birds, Value > 10000)\n\nmore_than_10000 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,991 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2002  2002\n 2 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2003  2003\n 3 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2004  2004\n 4 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2005  2005\n 5 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2006  2006\n 6 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2008  2008\n 7 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2009  2009\n 8 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2010  2010\n 9 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2011  2011\n10 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    2012  2012\n# … with 8,981 more rows, 4 more variables: Unit <chr>, Value <dbl>,\n#   Flag <chr>, `Flag Description` <chr>, and abbreviated variable names\n#   ¹​`Domain Code`, ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n```{.r .cell-code}\narrange(more_than_10000, Value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,991 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …     211 Swit…    5112 Stocks     1057 Chic…    2013  2013\n 2 QA           Live …     171 Phil…    5112 Stocks     1068 Ducks    2012  2012\n 3 QA           Live …     138 Mexi…    5112 Stocks     1079 Turk…    1982  1982\n 4 QA           Live …     115 Camb…    5112 Stocks     1057 Chic…    1994  1994\n 5 QA           Live …     222 Tuni…    5112 Stocks     1079 Turk…    2012  2012\n 6 QA           Live …      26 Brun…    5112 Stocks     1057 Chic…    2002  2002\n 7 QA           Live …      49 Cuba     5112 Stocks     1057 Chic…    1965  1965\n 8 QA           Live …     158 Niger    5112 Stocks     1057 Chic…    1990  1990\n 9 QA           Live …     133 Mali     5112 Stocks     1057 Chic…    1961  1961\n10 QA           Live …     225 Unit…    5112 Stocks     1057 Chic…    1994  1994\n# … with 8,981 more rows, 4 more variables: Unit <chr>, Value <dbl>,\n#   Flag <chr>, `Flag Description` <chr>, and abbreviated variable names\n#   ¹​`Domain Code`, ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nThe data above shows 'birds' for if the Value column was greater than 10000. The data is arranged by the 'Value' column values.\n\n## Data for Algeria in 'bird'\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#looking at 'birds' data set that has 'Value' column value greater than 10000 specifically for Algeria \nmore_than_10000_ALG <- filter(more_than_10000, Area == \"Algeria\")\n\nmore_than_10000_ALG \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 54 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1965  1965\n 2 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1966  1966\n 3 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1967  1967\n 4 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1968  1968\n 5 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1969  1969\n 6 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1970  1970\n 7 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1971  1971\n 8 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1972  1972\n 9 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1973  1973\n10 QA           Live …       4 Alge…    5112 Stocks     1057 Chic…    1974  1974\n# … with 44 more rows, 4 more variables: Unit <chr>, Value <dbl>, Flag <chr>,\n#   `Flag Description` <chr>, and abbreviated variable names ¹​`Domain Code`,\n#   ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nThe data above examines the data for Algeria by looking at 'birds' data set that haa values greater than 10000.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}