{
  "hash": "849c0f876f82379a8653f99bb437ab1f",
  "result": {
    "markdown": "---\ntitle: \"Final Project DACSS601\"\noutput: html_document\ndate: \"2022-08-17\"\n---\n\n\n# Introduction\n\nThe data set I have chosen for my final project is the hotel booking demand data set. The data set comprised over 119,000 reservations from two Portugal hotels: a Resort Hotel and a City Hotel in Lisbon. Check-in dates ranged from July 2015 to August 2017. Since most reservations were for the City Hotel, the distribution is uneven. Research questions: What is the best time of the year to book a hotel in Portugal? Through what distribution channel was the booking made by most? Which is the busiest month for hotels? From which country do a majority of guests come? What could be the possible reasons for a high number of cancellations?\n\n## Importing Packages\n\n\n\n\n\n## Loading in the Data set\n\nImporting and displaying the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhoteldata <- read.csv(\"_data/hotel_bookings.csv\", stringsAsFactors=TRUE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhoteldata <- as_tibble(hoteldata)\nglimpse(hoteldata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 119,390\nColumns: 32\n$ hotel                          <fct> Resort Hotel, Resort Hotel, Resort Hote…\n$ is_canceled                    <int> 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, …\n$ lead_time                      <int> 342, 737, 7, 13, 14, 14, 0, 9, 85, 75, …\n$ arrival_date_year              <int> 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ arrival_date_month             <fct> July, July, July, July, July, July, Jul…\n$ arrival_date_week_number       <int> 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,…\n$ arrival_date_day_of_month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           <int> 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, …\n$ adults                         <int> 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ children                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ babies                         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           <fct> BB, BB, BB, BB, BB, BB, BB, FB, BB, HB,…\n$ country                        <fct> PRT, PRT, GBR, GBR, GBR, GBR, PRT, PRT,…\n$ market_segment                 <fct> Direct, Direct, Direct, Corporate, Onli…\n$ distribution_channel           <fct> Direct, Direct, Direct, Corporate, TA/T…\n$ is_repeated_guest              <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             <fct> C, C, A, A, A, A, C, C, A, D, E, D, D, …\n$ assigned_room_type             <fct> C, C, C, A, A, A, C, C, A, D, E, D, E, …\n$ booking_changes                <int> 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   <fct> No Deposit, No Deposit, No Deposit, No …\n$ agent                          <fct> NULL, NULL, NULL, 304, 240, 240, NULL, …\n$ company                        <fct> NULL, NULL, NULL, NULL, NULL, NULL, NUL…\n$ days_in_waiting_list           <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  <fct> Transient, Transient, Transient, Transi…\n$ adr                            <dbl> 0.00, 0.00, 75.00, 75.00, 98.00, 98.00,…\n$ required_car_parking_spaces    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ total_of_special_requests      <int> 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, …\n$ reservation_status             <fct> Check-Out, Check-Out, Check-Out, Check-…\n$ reservation_status_date        <fct> 2015-07-01, 2015-07-01, 2015-07-02, 201…\n```\n:::\n:::\n\n\nDisplaying the first 10 elements of the data set gives a better idea.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hoteldata, n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <fct>    <int>   <int>   <int> <fct>     <int>   <int>   <int>   <int>  <int>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 22 more variables: children <int>, babies <int>, meal <fct>,\n#   country <fct>, market_segment <fct>, distribution_channel <fct>,\n#   is_repeated_guest <int>, previous_cancellations <int>,\n#   previous_bookings_not_canceled <int>, reserved_room_type <fct>,\n#   assigned_room_type <fct>, booking_changes <int>, deposit_type <fct>,\n#   agent <fct>, company <fct>, days_in_waiting_list <int>,\n#   customer_type <fct>, adr <dbl>, required_car_parking_spaces <int>, …\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\nDisplaying the number of rows, columns and summary of the data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(hoteldata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     32\n```\n:::\n\n```{.r .cell-code}\nsummary(hoteldata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hotel        is_canceled       lead_time   arrival_date_year\n City Hotel  :79330   Min.   :0.0000   Min.   :  0   Min.   :2015     \n Resort Hotel:40060   1st Qu.:0.0000   1st Qu.: 18   1st Qu.:2016     \n                      Median :0.0000   Median : 69   Median :2016     \n                      Mean   :0.3704   Mean   :104   Mean   :2016     \n                      3rd Qu.:1.0000   3rd Qu.:160   3rd Qu.:2017     \n                      Max.   :1.0000   Max.   :737   Max.   :2017     \n                                                                      \n arrival_date_month arrival_date_week_number arrival_date_day_of_month\n August :13877      Min.   : 1.00            Min.   : 1.0             \n July   :12661      1st Qu.:16.00            1st Qu.: 8.0             \n May    :11791      Median :28.00            Median :16.0             \n October:11160      Mean   :27.17            Mean   :15.8             \n April  :11089      3rd Qu.:38.00            3rd Qu.:23.0             \n June   :10939      Max.   :53.00            Max.   :31.0             \n (Other):47873                                                        \n stays_in_weekend_nights stays_in_week_nights     adults      \n Min.   : 0.0000         Min.   : 0.0         Min.   : 0.000  \n 1st Qu.: 0.0000         1st Qu.: 1.0         1st Qu.: 2.000  \n Median : 1.0000         Median : 2.0         Median : 2.000  \n Mean   : 0.9276         Mean   : 2.5         Mean   : 1.856  \n 3rd Qu.: 2.0000         3rd Qu.: 3.0         3rd Qu.: 2.000  \n Max.   :19.0000         Max.   :50.0         Max.   :55.000  \n                                                              \n    children           babies                 meal          country     \n Min.   : 0.0000   Min.   : 0.000000   BB       :92310   PRT    :48590  \n 1st Qu.: 0.0000   1st Qu.: 0.000000   FB       :  798   GBR    :12129  \n Median : 0.0000   Median : 0.000000   HB       :14463   FRA    :10415  \n Mean   : 0.1039   Mean   : 0.007949   SC       :10650   ESP    : 8568  \n 3rd Qu.: 0.0000   3rd Qu.: 0.000000   Undefined: 1169   DEU    : 7287  \n Max.   :10.0000   Max.   :10.000000                     ITA    : 3766  \n NA's   :4                                               (Other):28635  \n       market_segment  distribution_channel is_repeated_guest\n Online TA    :56477   Corporate: 6677      Min.   :0.00000  \n Offline TA/TO:24219   Direct   :14645      1st Qu.:0.00000  \n Groups       :19811   GDS      :  193      Median :0.00000  \n Direct       :12606   TA/TO    :97870      Mean   :0.03191  \n Corporate    : 5295   Undefined:    5      3rd Qu.:0.00000  \n Complementary:  743                        Max.   :1.00000  \n (Other)      :  239                                         \n previous_cancellations previous_bookings_not_canceled reserved_room_type\n Min.   : 0.00000       Min.   : 0.0000                A      :85994     \n 1st Qu.: 0.00000       1st Qu.: 0.0000                D      :19201     \n Median : 0.00000       Median : 0.0000                E      : 6535     \n Mean   : 0.08712       Mean   : 0.1371                F      : 2897     \n 3rd Qu.: 0.00000       3rd Qu.: 0.0000                G      : 2094     \n Max.   :26.00000       Max.   :72.0000                B      : 1118     \n                                                       (Other): 1551     \n assigned_room_type booking_changes       deposit_type        agent      \n A      :74053      Min.   : 0.0000   No Deposit:104641   9      :31961  \n D      :25322      1st Qu.: 0.0000   Non Refund: 14587   NULL   :16340  \n E      : 7806      Median : 0.0000   Refundable:   162   240    :13922  \n F      : 3751      Mean   : 0.2211                       1      : 7191  \n G      : 2553      3rd Qu.: 0.0000                       14     : 3640  \n C      : 2375      Max.   :21.0000                       7      : 3539  \n (Other): 3530                                            (Other):42797  \n    company       days_in_waiting_list         customer_type  \n NULL   :112593   Min.   :  0.000      Contract       : 4076  \n 40     :   927   1st Qu.:  0.000      Group          :  577  \n 223    :   784   Median :  0.000      Transient      :89613  \n 67     :   267   Mean   :  2.321      Transient-Party:25124  \n 45     :   250   3rd Qu.:  0.000                             \n 153    :   215   Max.   :391.000                             \n (Other):  4354                                               \n      adr          required_car_parking_spaces total_of_special_requests\n Min.   :  -6.38   Min.   :0.00000             Min.   :0.0000           \n 1st Qu.:  69.29   1st Qu.:0.00000             1st Qu.:0.0000           \n Median :  94.58   Median :0.00000             Median :0.0000           \n Mean   : 101.83   Mean   :0.06252             Mean   :0.5714           \n 3rd Qu.: 126.00   3rd Qu.:0.00000             3rd Qu.:1.0000           \n Max.   :5400.00   Max.   :8.00000             Max.   :5.0000           \n                                                                        \n reservation_status reservation_status_date\n Canceled :43017    2015-10-21:  1461      \n Check-Out:75166    2015-07-06:   805      \n No-Show  : 1207    2016-11-25:   790      \n                    2015-01-01:   763      \n                    2016-01-18:   625      \n                    2015-07-02:   469      \n                    (Other)   :114477      \n```\n:::\n:::\n\nThe hotel data set is composed of 119,390 rows and 32 columns.\n\n# Tidying the Data\n\nDisplaying the overall amount of hotel and meal reservations made between the years of 2015 and 2017.\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(hoteldata$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  City Hotel Resort Hotel \n       79330        40060 \n```\n:::\n\n```{.r .cell-code}\ntable(hoteldata$meal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n       BB        FB        HB        SC Undefined \n    92310       798     14463     10650      1169 \n```\n:::\n\n```{.r .cell-code}\ntable(hoteldata$arrival_date_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 2015  2016  2017 \n21996 56707 40687 \n```\n:::\n:::\n\nHere there are four meal options: BB: Bed and Breakfast (Breakfast is included in the hotel's price). \nFB: Full Board (Breakfast, lunch and dinner are all included in the hotel's price). \nHB: Half Board (Price includes breakfast and dinner in the hotel's price). \nSC / Undefined: Self Catering meals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replacing the undefined values with \"SC\" and then displaying it's unique values\nhoteldata$meal <-replace(hoteldata$meal,hoteldata$meal=='Undefined','SC')\nhoteldata$meal <- factor(hoteldata$meal)\nlevels(hoteldata$meal)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"BB\" \"FB\" \"HB\" \"SC\"\n```\n:::\n:::\n\n## Removing unwanted columns\n'Company' was omitted from this table because it did not seem helpful. There are too many 'NULL' values in the 'Company' column. Modifying the NaN values in this could make an immense difference in the data and change the meaning of the actual data. The company variable can be fully removed from the data set because there is no way to fill in the missing values. Three columns provide us with the reservation date: arrival date year, arrival date month, and arrival date day of the month. The \"arrival date week number\" column appears of little value in this situation. Eliminating the arrival_date_week_number and company variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhoteldata = subset(hoteldata, select = -c(company, arrival_date_week_number))\n```\n:::\n\n\n## Dealing with missing values\nThe agent column has a few missing values that can be omitted. Removing rows with missing values in the agent column.\n\n::: {.cell}\n\n```{.r .cell-code}\nhoteldata <- hoteldata[!hoteldata$agent == \"NULL\", ]\nglimpse(hoteldata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 103,050\nColumns: 30\n$ hotel                          <fct> Resort Hotel, Resort Hotel, Resort Hote…\n$ is_canceled                    <int> 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, …\n$ lead_time                      <int> 13, 14, 14, 9, 85, 75, 23, 35, 68, 18, …\n$ arrival_date_year              <int> 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ arrival_date_month             <fct> July, July, July, July, July, July, Jul…\n$ arrival_date_day_of_month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           <int> 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, …\n$ adults                         <int> 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ children                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, …\n$ babies                         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           <fct> BB, BB, BB, FB, BB, HB, BB, HB, BB, HB,…\n$ country                        <fct> GBR, GBR, GBR, PRT, PRT, PRT, PRT, PRT,…\n$ market_segment                 <fct> Corporate, Online TA, Online TA, Direct…\n$ distribution_channel           <fct> Corporate, TA/TO, TA/TO, Direct, TA/TO,…\n$ is_repeated_guest              <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             <fct> A, A, A, C, A, D, E, D, D, G, E, D, E, …\n$ assigned_room_type             <fct> A, A, A, C, A, D, E, D, E, G, E, E, E, …\n$ booking_changes                <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, …\n$ deposit_type                   <fct> No Deposit, No Deposit, No Deposit, No …\n$ agent                          <fct> 304, 240, 240, 303, 240, 15, 240, 240, …\n$ days_in_waiting_list           <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  <fct> Transient, Transient, Transient, Transi…\n$ adr                            <dbl> 75.00, 98.00, 98.00, 103.00, 82.00, 105…\n$ required_car_parking_spaces    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ total_of_special_requests      <int> 0, 1, 1, 1, 1, 0, 0, 0, 3, 1, 0, 3, 0, …\n$ reservation_status             <fct> Check-Out, Check-Out, Check-Out, Check-…\n$ reservation_status_date        <fct> 2015-07-02, 2015-07-03, 2015-07-03, 201…\n```\n:::\n:::\n\nChecking if there are any missing values (NA/NaN) in the data set. Finding the number of missing values in every column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(hoteldata))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                         hotel                    is_canceled \n                             0                              0 \n                     lead_time              arrival_date_year \n                             0                              0 \n            arrival_date_month      arrival_date_day_of_month \n                             0                              0 \n       stays_in_weekend_nights           stays_in_week_nights \n                             0                              0 \n                        adults                       children \n                             0                              2 \n                        babies                           meal \n                             0                              0 \n                       country                 market_segment \n                             0                              0 \n          distribution_channel              is_repeated_guest \n                             0                              0 \n        previous_cancellations previous_bookings_not_canceled \n                             0                              0 \n            reserved_room_type             assigned_room_type \n                             0                              0 \n               booking_changes                   deposit_type \n                             0                              0 \n                         agent           days_in_waiting_list \n                             0                              0 \n                 customer_type                            adr \n                             0                              0 \n   required_car_parking_spaces      total_of_special_requests \n                             0                              0 \n            reservation_status        reservation_status_date \n                             0                              0 \n```\n:::\n:::\n\nWe can observe that only one column, the one with 'children' as the column name, seems to have values missing. Substituting the values in the children column for the ones in the babies column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- length(hoteldata)\nfor (i in n) {\n        if (is.na(hoteldata$children[i])) \n                hoteldata$children[i] <- hoteldata$babies\n        \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checking for outliers\nhoteldata%>%\n  filter(adr>800)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 30\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ stays…⁶ stays…⁷ adults child…⁸\n  <fct>     <int>   <int>   <int> <fct>     <int>   <int>   <int>  <int>   <int>\n1 City H…       1      35    2016 March        25       0       1      2       0\n# … with 20 more variables: babies <int>, meal <fct>, country <fct>,\n#   market_segment <fct>, distribution_channel <fct>, is_repeated_guest <int>,\n#   previous_cancellations <int>, previous_bookings_not_canceled <int>,\n#   reserved_room_type <fct>, assigned_room_type <fct>, booking_changes <int>,\n#   deposit_type <fct>, agent <fct>, days_in_waiting_list <int>,\n#   customer_type <fct>, adr <dbl>, required_car_parking_spaces <int>,\n#   total_of_special_requests <int>, reservation_status <fct>, …\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\nHere it is visible that there in only one outlier where the average daily rate (adr) is greater than 800. Updating the outlier value by the mean of adr (average daily rate).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhoteldata = hoteldata%>%\n  mutate(adr = replace(adr, adr>1000, mean(adr)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhoteldata%>%group_by(arrival_date_month, arrival_date_year)%>%tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 × 3\n# Groups:   arrival_date_month [12]\n   arrival_date_month arrival_date_year     n\n   <fct>                          <int> <int>\n 1 April                           2016  4854\n 2 April                           2017  4904\n 3 August                          2015  3357\n 4 August                          2016  4692\n 5 August                          2017  4633\n 6 December                        2015  2367\n 7 December                        2016  3264\n 8 February                        2016  3056\n 9 February                        2017  3405\n10 January                         2016  1784\n# … with 16 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\nJuly and August are the only 2 months where they had bookings all the three years 2015,2016,2017. This could typically corelate with the weather and summer breaks for children.\n\n# Visualising the data\n\nChecking the number of bookings for Resort Hotel and City Hotel each:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(hoteldata$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  City Hotel Resort Hotel \n       71199        31851 \n```\n:::\n:::\n\n\nVisualizing this graphically gives us a better picture.\n\n::: {.cell}\n\n```{.r .cell-code}\n#The percentage of city hotels is more\n\nggplot(hoteldata, aes(x = hotel)) + geom_bar(mapping = aes(x = hotel), color = \"blue\", fill= \"black\", stat = \"count\") + labs(title = \"Bookings based on hotel type\", x= \"Type of hotel\", y= \"Number of bookings\")\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\nWe can see that City Hotel has been booked more times than the Resort Hotel between 2015 - 2017. This uneven distribution was the primary reason why I chose this data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Check the number of cancellations made by respective hotels.\ntable(hoteldata$is_canceled, hoteldata$hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   \n    City Hotel Resort Hotel\n  0      40706        22150\n  1      30493         9701\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Visualizing the number of cancellations based on type of hotel.\nggplot(data = hoteldata,\n       aes(\n         x = hotel,\n         y = prop.table(stat(count)),\n         fill = factor(is_canceled), width = 0.5,\n         label = scales::percent(prop.table(stat(count)))\n       )) +\n  geom_bar(position = position_dodge()) +\n  geom_text(\n    stat = \"count\",\n    position = position_dodge(.9),\n    vjust = -0.5,\n    size = 3\n  ) + scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Status of Cancellations based on Hotel\",\n       x = \"Type of Hotel\",\n       y = \"Count\") +\n  theme_classic() +\n  scale_fill_discrete(\n    name = \"Booking Status\",\n    labels = c(\"Cancelled\", \"Not Cancelled\")\n  )\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\nIt is evident that City Hotel has more bookings than the Resort Hotel. However, the number of 'Cancelled' bookings is more for both the hotels than the bookings 'Not Cancelled'. This could be related to something after the booking has been made.\n\n**Lead Time** is the amount of time between the booking made and the actual date of check in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = hoteldata, aes(x = hotel,y = lead_time,fill    =factor(is_canceled))) + geom_boxplot(position = position_dodge()) +\nlabs(title = \"Cancellations made after booking (lead time)\", \nx = \"Type of Hotel\",y = \"Lead Time\") + scale_fill_discrete(name = \"Booking Status\",breaks = c(\"0\", \"1\"),labels = c(\"Cancelled\", \"Not Cancelled\")) + theme_classic()\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\nLead time is the actual time between the day when booking made and actual day of checking in. From the plot we can see that cancellation of bookings normally occurs soon after booking. The cancellations seem to be less when enough time has passed after the booking has been made.\n\nChecking the unique values in the arrival_date_year column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hoteldata$arrival_date_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2015 2016 2017\n```\n:::\n:::\n\nChecking which year had most bookings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hoteldata, aes(x = arrival_date_year)) + geom_bar(mapping = aes(x = arrival_date_year, fill = hotel), stat = \"count\") + labs(title = \" Total bookings based on Year\", x= \"Year\", y= \"Number of bookings\")\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\nComparison of year of Arrival date versus cancellation, year 2016 is the one with the most bookings as well as cancellations. More than double bookings were made in 2016, compared to the previous year. But the bookings decreased by almost 15% the next year. **Inference:** Bookings over the years are consistently greater for city hotels than resort hotels and do not increase proportionately over the years.\n\nIt will be interesting to see which month was most favoured by visitors to travel. We will select the arrival_date_month feature to answer this question and get its value count. We must first sort the data because it is not organized according to the order of months.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Arranging months in correct order :\n\nhoteldata$arrival_date_month <-\n  factor(hoteldata$arrival_date_month, levels = month.name)\n\n# Visualize Hotel bookings on Monthly basis\n\narrival_date_month <- hoteldata$arrival_date_month\nreservemonth<-table(arrival_date_month)\n reservemonth<-data.frame(reservemonth)\n reservemonth$arrival_date_month<-factor(reservemonth$arrival_date_month, levels=month.name)\n ggplot(reservemonth, aes(x=arrival_date_month, y=Freq, group=1)) + geom_line(col=\"navy\") + \n  ggtitle(\"Reservations by Arrival Month\") + ylab(\"Count\") + xlab(\"Month\")+\n  theme(axis.text.x=element_text(angle=40))\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = hoteldata, aes(x = arrival_date_month)) +\n  geom_bar(fill = \"black\", alpha = 0.1) + geom_text(stat = \"count\", aes(label = ..count..), hjust = 3) +\n  coord_flip() + labs(title = \"Month Wise Booking Request\",\n                      x = \"Month\",\n                      y = \"Count\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n:::\n\nWe can observe that August and July are the most frequently booked months. Weather variations can be to blame for this. The winter season saw few reservations (November, December, and January). The month of August receives the most reservations because it is when most kids take their summer vacations. The month with the slightest reservations is January, which may be related to the climate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrival_date_month <- hoteldata$arrival_date_month\nggplot(hoteldata, aes(x=arrival_date_month, fill = hotel)) + \n  geom_bar(position = position_dodge(), stat = \"count\") + \n  labs(title = \"Booking Status by Month\",\n       x = \"Month\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        panel.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\nSeasonally, the combined revenue for the two hotels rose from year to year. This is particularly crucial for the resort hotel because the majority of its annual revenue is generated during the summer. The city hotel's seasonal revenue is relatively stable during the fall, spring, and summer seasons but decreases during the winter.\n\nShows when there are lesser days on the waiting list, there is a lesser number of cancellations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Histogram illustrating Days in waiting list and cancellations\nhoteldata%>%\n  filter(days_in_waiting_list>1)%>%\n  ggplot(aes(x=days_in_waiting_list,fill= factor(is_canceled)))+\n  geom_histogram(binwidth = 10) + labs(title = \"Visualising days in waiting list and cancellations\", x= \"Days in waiting list\", y= \"No. of cancellations\")\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n**Inference:** From this we can infer that when the number of days in the waiting list is low there seems to be lower cancellations. This could also be related to cancellation when they were informed they would not get the requested room.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Checking the purpose of the reservation and visualizing it.\nggplot(hoteldata, aes(y= market_segment)) + geom_bar(mapping = aes(y= market_segment), colour = \"black\", stat = \"count\", width = 0.5) + theme(axis.text.x = element_text(hjust = 0.2)) + labs(title = \"Segment wise booking\", y= \"market segment\")\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\nIndirect bookings through online and offline travel agents are higher than direct bookings, and the same is true with group bookings, which are also high. For most countries and continents, online travel companies were the most common way to make reservations. Relying on these conclusions, the hotel advertising department might direct most of its marketing funds to these online travel agencies to draw current and potential visitors to their hotels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Checking the assigned room types:\n\nhoteldata%>%\n  ggplot(aes(x = assigned_room_type, fill = factor(is_canceled))) +\n  geom_bar() + labs(title = \"Bookings based on assigned room type\", x= \"Assigned room type\", y= \"Number of bookings\")\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n**Inference:** We can observe that room type 'A' was booked the most by customers. However, the number of cancellations of room type 'A' also is the highest. This could be due to the non-availability of the room, or the customer could have been reassigned to another room, which could be the reason for such a high number of cancellations.\n\nVisualizing the total number of nights stayed at the City Hotel and the Resort Hotel. We calculate total number of nights stayed by adding values of two columns stays_in_weekend_nights and stays_in_week_nights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotalnights <- hoteldata$stays_in_weekend_nights + hoteldata$stays_in_week_nights\n\ntotalcost <- totalnights*hoteldata$adr\n\nhoteldata%>%mutate(totalnights, totalcost)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 103,050 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ stays…⁶ stays…⁷ adults child…⁸\n   <fct>    <int>   <int>   <int> <fct>     <int>   <int>   <int>  <int>   <int>\n 1 Resor…       0      13    2015 July          1       0       1      1       0\n 2 Resor…       0      14    2015 July          1       0       2      2       0\n 3 Resor…       0      14    2015 July          1       0       2      2       0\n 4 Resor…       0       9    2015 July          1       0       2      2       0\n 5 Resor…       1      85    2015 July          1       0       3      2       0\n 6 Resor…       1      75    2015 July          1       0       3      2       0\n 7 Resor…       1      23    2015 July          1       0       4      2       0\n 8 Resor…       0      35    2015 July          1       0       4      2       0\n 9 Resor…       0      68    2015 July          1       0       4      2       0\n10 Resor…       0      18    2015 July          1       0       4      2       1\n# … with 103,040 more rows, 22 more variables: babies <int>, meal <fct>,\n#   country <fct>, market_segment <fct>, distribution_channel <fct>,\n#   is_repeated_guest <int>, previous_cancellations <int>,\n#   previous_bookings_not_canceled <int>, reserved_room_type <fct>,\n#   assigned_room_type <fct>, booking_changes <int>, deposit_type <fct>,\n#   agent <fct>, days_in_waiting_list <int>, customer_type <fct>, adr <dbl>,\n#   required_car_parking_spaces <int>, total_of_special_requests <int>, …\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n```{.r .cell-code}\nggplot(hoteldata, aes(x= totalnights, y= totalcost, color = hotel )) + geom_point(alpha=0.5) + labs(title = \"Bookings based total nights stayed\", x= \"Total number of nights stayed\", y= \"Total cost\") + theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        panel.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n**Inference:** From this we can see majority of the customers stayed for a period less than 2 weeks and most people stayed at the city hotel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Exploring the data across different market segments\nggplot(hoteldata, aes(x=totalnights,y=totalcost,shape=hotel,color=is_canceled))+\n  geom_point()+\n  facet_wrap(~market_segment)\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\nHere we can see nobody from Aviation segment stayed at the Resort Hotel. Majority of the customers that booked through Offline TA/TO and Online TA have more cancellations than other market segments. Groups segment has cancellation rate around 50%.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Number of days in waiting list based on market segment\nggplot(hoteldata, aes(x = market_segment, y = days_in_waiting_list)) +\n   geom_point()+ \n   ylab('Number of days in waiting list')+\n  xlab('Market segment')+\n  ggtitle('Number of days in waiting list based on market segment') \n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\nThe shortest period on the waiting list is in the aviation sector. The explanation may be because airlines have to arrange stay and meals for their employees or passengers, and therefore, they do not want to book hotels that would put them on a waiting list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Visulizing bookings based on country:\nhoteldatasample <- hoteldata[hoteldata$reservation_status == \"Check-Out\",]\n\nhoteldatasubset <- hoteldata%>%group_by(country)%>%filter(n() >1000)\n\nggplot(hoteldatasubset, aes(country, fill = hotel)) + \n  geom_bar(position = position_dodge(), stat = \"count\") + \n  labs(title = \"Booking Status by Country\",\n       x = \"Country\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        panel.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\nPortugal, UK and France, Spain and Germany are the top countries from most guests come, more than 80% come from these 5 countries. The fact that these hotels are in Portugal may help to explain why most reservations are from European nations, with Portugal accounting for the most significant percentage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Visualizing bookings based on customer type:\nggplot(hoteldatasubset, aes(customer_type, fill = hotel)) + \n  geom_bar(position = position_dodge(), stat = \"count\") + \n  labs(title = \"Hotel Preference by Customer Type\",\n       x = \"Customer Type\",\n       y = \"Count\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        panel.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](FinalProject_DACSS601_KaushikaPotluri_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\nOne of the leading market segments, transient guests, are people or groups who book fewer than ten rooms per night. Typically, they are drop-in visitors, last-minute travelers, or people who need to reserve a room at a hotel property for a brief period.\n\n# Conclusion\n\nThere were numerous facets of this data set to examine. I wanted to investigate and find out where the majority of customers came from, what kind of hotel was most frequently booked, which year had the most bookings, and which market segment had the fewest days on the waiting list. Lastly, I wanted to find out which months are the busiest for both city hotels and resorts. Despite the fact that both hotel types had an increase in demand over the summer, I found it fascinating to note that the booking trend for resort hotels was more consistent throughout the year than for city hotels, which I would have expected to be the reverse. There are a few limitations to this data set. I surmised that a customer could have gotten an accommodation upgrade from what they reserved, which does not seem to be available to us. Another drawback of this data set is that the room kinds are encoded, making it impossible to know what each one contains (like the type of amenities available in the room). I could fine-tune these insights and determine whether or not a visitor is likely to terminate their stay if this data were available.\n\n# Bibliography\n\n<https://ggplot2-book.org/>\n\n<https://github.com/hadley/tidyr>\n\n<https://www.sciencedirect.com/science/article/pii/S2352340918315191>\n\n<https://www.researchgate.net/publication/329286343_Hotel_booking_demand_datasets>\n",
    "supporting": [
      "FinalProject_DACSS601_KaushikaPotluri_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}