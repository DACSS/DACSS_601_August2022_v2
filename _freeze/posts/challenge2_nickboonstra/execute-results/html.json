{
  "hash": "766cfa7750ad92133134422de8b21e69",
  "result": {
    "markdown": "---\ntitle: \"Nick Boonstra Challenge 2\"\nauthor: \"Nick Boonstra\"\ndesription: \"Data wrangling: using group() and summarise()\"\ndate: \"08/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_2\n  - boonstra\n  - week_1\n  - hotels\n---\n\n\n## Introduction\n\nFor today's challenge, I will be reading in and wrangling data from the \"hotel_bookings\" dataset.\n\n#### Setup Chunk\n\nFirst, my R setup chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Reading in the data\n\nReading in the data was a fairly straightforward process:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels<-read_csv(\"_data/hotel_bookings.csv\")\nhotels\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 32\n   hotel  is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n   <chr>    <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n 1 Resor…       0     342    2015 July         27       1       0       0      2\n 2 Resor…       0     737    2015 July         27       1       0       0      2\n 3 Resor…       0       7    2015 July         27       1       0       1      1\n 4 Resor…       0      13    2015 July         27       1       0       1      1\n 5 Resor…       0      14    2015 July         27       1       0       2      2\n 6 Resor…       0      14    2015 July         27       1       0       2      2\n 7 Resor…       0       0    2015 July         27       1       0       2      2\n 8 Resor…       0       9    2015 July         27       1       0       2      2\n 9 Resor…       1      85    2015 July         27       1       0       3      2\n10 Resor…       1      75    2015 July         27       1       0       3      2\n# … with 119,380 more rows, 22 more variables: children <dbl>, babies <dbl>,\n#   meal <chr>, country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, previous_bookings_not_canceled <dbl>,\n#   reserved_room_type <chr>, assigned_room_type <chr>, booking_changes <dbl>,\n#   deposit_type <chr>, agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\n#### Transformations\n\nAfter reading in the data, I made a few transformations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels<-hotels %>% \n  rename(is_cancelled = is_canceled) %>%  ## i'm petty\n  mutate(booking_dummy = case_when( ## dummy var for whether or not changes were made\n    booking_changes == 0 ~ 0,\n    T ~ 1\n  )) %>% \n  mutate(arrival_date_month_num = case_when( ## numerical variable for months\n    arrival_date_month == \"January\" ~ 1,\n    arrival_date_month == \"February\" ~ 2,\n    arrival_date_month == \"March\" ~ 3,\n    arrival_date_month == \"April\" ~ 4,\n    arrival_date_month == \"May\" ~ 5,\n    arrival_date_month == \"June\" ~ 6,\n    arrival_date_month == \"July\" ~ 7,\n    arrival_date_month == \"August\" ~ 8,\n    arrival_date_month == \"September\" ~ 9,\n    arrival_date_month == \"October\" ~ 10,\n    arrival_date_month == \"November\" ~ 11,\n    arrival_date_month == \"December\" ~ 12\n  ))\n```\n:::\n\n\nI found that this data set only required fairly minimal/minor transformations. Firstly, I renamed the \"is_canceled\" variable to \"is_cancelled\" primarily because I'm petty, and I knew I would want to spell it with the double \"L\" the whole time. Next, I created a dummy variable called \"booking_dummy\" for whether or not any changes were made to a booking, regardless of how many such changes there were. Lastly, I created a variable named \"arrival_date_month_num\" to assign the corresponding number to each month as named in the \"arrival_date_month\" column.\n\n## Describing the data\n\nBefore I started summarising, I wanted to get a sense of what the data \"looked like,\" so to speak:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                          \"is_cancelled\"                  \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n[33] \"booking_dummy\"                  \"arrival_date_month_num\"        \n```\n:::\n\n```{.r .cell-code}\ncount(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n       n\n   <int>\n1 119390\n```\n:::\n\n```{.r .cell-code}\ncount(hotels,hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel            n\n  <chr>        <int>\n1 City Hotel   79330\n2 Resort Hotel 40060\n```\n:::\n\n```{.r .cell-code}\ncount(hotels,country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 178 × 2\n   country     n\n   <chr>   <int>\n 1 ABW         2\n 2 AGO       362\n 3 AIA         1\n 4 ALB        12\n 5 AND         7\n 6 ARE        51\n 7 ARG       214\n 8 ARM         8\n 9 ASM         1\n10 ATA         2\n# … with 168 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\narrivals<-xtabs(~arrival_date_year+arrival_date_month_num,hotels)\narrivals\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 arrival_date_month_num\narrival_date_year    1    2    3    4    5    6    7    8    9   10   11   12\n             2015    0    0    0    0    0    0 2776 3889 5114 4957 2340 2920\n             2016 2248 3891 4824 5428 5478 5292 4572 5063 5394 6203 4454 3860\n             2017 3681 4177 4970 5661 6313 5647 5313 4925    0    0    0    0\n```\n:::\n:::\n\n\nThis data set appears to describe hotel bookings from across a number of different countries and kinds of hotels, in the time range between July 2015 and August 2018. Each observation appears to be a single booking, with a range of information about each booking tracked in each column.\n\n## Provide Grouped Summary Statistics\n\nAs I looked through the data, I found myself gravitating toward the information about booking changes and cancellations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotels %>% \n  group_by(is_cancelled) %>% \n  summarise(mean(booking_changes,na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  is_cancelled `mean(booking_changes, na.rm = T)`\n         <dbl>                              <dbl>\n1            0                             0.293 \n2            1                             0.0983\n```\n:::\n\n```{.r .cell-code}\nhotels %>% \n  group_by(is_cancelled) %>%\n  summarise(median(booking_changes))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  is_cancelled `median(booking_changes)`\n         <dbl>                     <dbl>\n1            0                         0\n2            1                         0\n```\n:::\n:::\n\n\nClearly, most bookings did not have any changes to their booking, demonstrated by the fact that the median number of changes for both cancelled and non-cancelled bookings was 0. However, it is interesting to observe that non-cancelled bookings tended to have more booking changes performed, suggesting that making changes to a booking may have increased the likelihood of that booking not having to be cancelled -- a boon for hotels and travel agencies, if that extra bit of work is all it takes to retain a customer.\n\n### Visualizing and Interpreting\n\nThese observations can be seen much more clearly in a graphic visualization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(hotels,aes(x=factor(booking_dummy),fill=factor(is_cancelled))) +\n  geom_bar() +\n  theme_bw() +\n  labs(title = \"Cancellations by changes in booking\", x = \"Change in booking?\", y= \"Number of bookings\",\n       fill = \"Booking cancelled?\")\n```\n\n::: {.cell-output-display}\n![](challenge2_nickboonstra_files/figure-html/cancellations-1.png){width=672}\n:::\n:::\n\n\nThis bar graph utilizes the \"booking_dummy\" variable, easily dividing all bookings into those that had changes performed and those that didn't. As can be seen, there were more bookings cancelled without changes being made than there were total bookings with changes! Additionally, a much smaller proportion of bookings with changes ended up being cancelled when compared to bookings without any changes made (though cancellations accounted for less than half of each group in the end). Of course, it is hard to make broad generalizations without knowing more of the story told by this data. However, on the face of things it looks as though a case could be made for flexibility with regards to changing bookings as a strong protection against customers cancelling reservations.\n",
    "supporting": [
      "challenge2_nickboonstra_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}