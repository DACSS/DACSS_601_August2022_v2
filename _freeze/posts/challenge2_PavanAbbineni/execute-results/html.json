{
  "hash": "0e5d47573986fdb62326c90c3e4fd281",
  "result": {
    "markdown": "---\ntitle: \"Challenge 2\"\nauthor: \"Pavan Datta Abbineni \"\ndesription: \"Data wrangling: using group() and summarise()\"\ndate: \"08/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_2\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in the Data\n\nI've decided to use the hotel bookings dataset for this challenge.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelBookingsCompleteData <- read_csv(\"_data/hotel_bookings.csv\")\n```\n:::\n\n\n\n## Describe the data\n\nLet's get a  brief understanding of our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(hotelBookingsCompleteData)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Resort…       0     342    2015 July         27       1       0       0      2\n2 Resort…       0     737    2015 July         27       1       0       0      2\n3 Resort…       0       7    2015 July         27       1       0       1      1\n4 Resort…       0      13    2015 July         27       1       0       1      1\n5 Resort…       0      14    2015 July         27       1       0       2      2\n6 Resort…       0      14    2015 July         27       1       0       2      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(hotelBookingsCompleteData)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 32\n  hotel   is_ca…¹ lead_…² arriv…³ arriv…⁴ arriv…⁵ arriv…⁶ stays…⁷ stays…⁸ adults\n  <chr>     <dbl>   <dbl>   <dbl> <chr>     <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 City H…       0      21    2017 August       35      30       2       5      2\n2 City H…       0      23    2017 August       35      30       2       5      2\n3 City H…       0     102    2017 August       35      31       2       5      3\n4 City H…       0      34    2017 August       35      31       2       5      2\n5 City H…       0     109    2017 August       35      31       2       5      2\n6 City H…       0     205    2017 August       35      29       2       7      2\n# … with 22 more variables: children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>, distribution_channel <chr>,\n#   is_repeated_guest <dbl>, previous_cancellations <dbl>,\n#   previous_bookings_not_canceled <dbl>, reserved_room_type <chr>,\n#   assigned_room_type <chr>, booking_changes <dbl>, deposit_type <chr>,\n#   agent <chr>, company <chr>, days_in_waiting_list <dbl>,\n#   customer_type <chr>, adr <dbl>, required_car_parking_spaces <dbl>, …\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(hotelBookingsCompleteData)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 119390     32\n```\n:::\n:::\n\nThe dataset contains a total of 119390 observations with a total of 32 columns, lets see the column names next.\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(hotelBookingsCompleteData)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n:::\n:::\n\nTo get the dispersion values of the data set let's call the summary function.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(hotelBookingsCompleteData)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    hotel            is_canceled       lead_time   arrival_date_year\n Length:119390      Min.   :0.0000   Min.   :  0   Min.   :2015     \n Class :character   1st Qu.:0.0000   1st Qu.: 18   1st Qu.:2016     \n Mode  :character   Median :0.0000   Median : 69   Median :2016     \n                    Mean   :0.3704   Mean   :104   Mean   :2016     \n                    3rd Qu.:1.0000   3rd Qu.:160   3rd Qu.:2017     \n                    Max.   :1.0000   Max.   :737   Max.   :2017     \n                                                                    \n arrival_date_month arrival_date_week_number arrival_date_day_of_month\n Length:119390      Min.   : 1.00            Min.   : 1.0             \n Class :character   1st Qu.:16.00            1st Qu.: 8.0             \n Mode  :character   Median :28.00            Median :16.0             \n                    Mean   :27.17            Mean   :15.8             \n                    3rd Qu.:38.00            3rd Qu.:23.0             \n                    Max.   :53.00            Max.   :31.0             \n                                                                      \n stays_in_weekend_nights stays_in_week_nights     adults      \n Min.   : 0.0000         Min.   : 0.0         Min.   : 0.000  \n 1st Qu.: 0.0000         1st Qu.: 1.0         1st Qu.: 2.000  \n Median : 1.0000         Median : 2.0         Median : 2.000  \n Mean   : 0.9276         Mean   : 2.5         Mean   : 1.856  \n 3rd Qu.: 2.0000         3rd Qu.: 3.0         3rd Qu.: 2.000  \n Max.   :19.0000         Max.   :50.0         Max.   :55.000  \n                                                              \n    children           babies              meal             country         \n Min.   : 0.0000   Min.   : 0.000000   Length:119390      Length:119390     \n 1st Qu.: 0.0000   1st Qu.: 0.000000   Class :character   Class :character  \n Median : 0.0000   Median : 0.000000   Mode  :character   Mode  :character  \n Mean   : 0.1039   Mean   : 0.007949                                        \n 3rd Qu.: 0.0000   3rd Qu.: 0.000000                                        \n Max.   :10.0000   Max.   :10.000000                                        \n NA's   :4                                                                  \n market_segment     distribution_channel is_repeated_guest\n Length:119390      Length:119390        Min.   :0.00000  \n Class :character   Class :character     1st Qu.:0.00000  \n Mode  :character   Mode  :character     Median :0.00000  \n                                         Mean   :0.03191  \n                                         3rd Qu.:0.00000  \n                                         Max.   :1.00000  \n                                                          \n previous_cancellations previous_bookings_not_canceled reserved_room_type\n Min.   : 0.00000       Min.   : 0.0000                Length:119390     \n 1st Qu.: 0.00000       1st Qu.: 0.0000                Class :character  \n Median : 0.00000       Median : 0.0000                Mode  :character  \n Mean   : 0.08712       Mean   : 0.1371                                  \n 3rd Qu.: 0.00000       3rd Qu.: 0.0000                                  \n Max.   :26.00000       Max.   :72.0000                                  \n                                                                         \n assigned_room_type booking_changes   deposit_type          agent          \n Length:119390      Min.   : 0.0000   Length:119390      Length:119390     \n Class :character   1st Qu.: 0.0000   Class :character   Class :character  \n Mode  :character   Median : 0.0000   Mode  :character   Mode  :character  \n                    Mean   : 0.2211                                        \n                    3rd Qu.: 0.0000                                        \n                    Max.   :21.0000                                        \n                                                                           \n   company          days_in_waiting_list customer_type           adr         \n Length:119390      Min.   :  0.000      Length:119390      Min.   :  -6.38  \n Class :character   1st Qu.:  0.000      Class :character   1st Qu.:  69.29  \n Mode  :character   Median :  0.000      Mode  :character   Median :  94.58  \n                    Mean   :  2.321                         Mean   : 101.83  \n                    3rd Qu.:  0.000                         3rd Qu.: 126.00  \n                    Max.   :391.000                         Max.   :5400.00  \n                                                                             \n required_car_parking_spaces total_of_special_requests reservation_status\n Min.   :0.00000             Min.   :0.0000            Length:119390     \n 1st Qu.:0.00000             1st Qu.:0.0000            Class :character  \n Median :0.00000             Median :0.0000            Mode  :character  \n Mean   :0.06252             Mean   :0.5714                              \n 3rd Qu.:0.00000             3rd Qu.:1.0000                              \n Max.   :8.00000             Max.   :5.0000                              \n                                                                         \n reservation_status_date\n Min.   :2014-10-17     \n 1st Qu.:2016-02-01     \n Median :2016-08-07     \n Mean   :2016-07-30     \n 3rd Qu.:2017-02-08     \n Max.   :2017-09-14     \n                        \n```\n:::\n:::\n\n\n## Provide Grouped Summary Statistics\n\nTo find which hotels are accomodating more guests lets find the mean for both the stays_in_week_nights and stays_in_weekend_nights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelBookingsCompleteData %>%\n  group_by(hotel) %>%\n  summarise(mean = mean(stays_in_week_nights))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel         mean\n  <chr>        <dbl>\n1 City Hotel    2.18\n2 Resort Hotel  3.13\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelBookingsCompleteData %>%\n  group_by(hotel) %>%\n  summarise(mean = mean(stays_in_weekend_nights))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel         mean\n  <chr>        <dbl>\n1 City Hotel   0.795\n2 Resort Hotel 1.19 \n```\n:::\n:::\n\nWe can see that the resort hotel is generally more popular with guests both during the week and on the weekends, in general both hotels are more popular during the week than the weekends. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelBookingsCompleteData %>%       \n  group_by(hotel) %>%\n  summarise(totalCancellations = sum(is_canceled))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel        totalCancellations\n  <chr>                     <dbl>\n1 City Hotel                33102\n2 Resort Hotel              11122\n```\n:::\n:::\n\nWe can see that the City Hotel had more cancellations when compared to a resort hotel.  \n\n\nLet's find out which countries are more popular \n\n::: {.cell}\n\n```{.r .cell-code}\ncountryTableData<-hotelBookingsCompleteData %>% group_by(country) %>% summarise(hotel = n())\n\ncountryTableData %>% group_by(country) %>% arrange(desc(hotel))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 178 × 2\n# Groups:   country [178]\n   country hotel\n   <chr>   <int>\n 1 PRT     48590\n 2 GBR     12129\n 3 FRA     10415\n 4 ESP      8568\n 5 DEU      7287\n 6 ITA      3766\n 7 IRL      3375\n 8 BEL      2342\n 9 BRA      2224\n10 NLD      2104\n# … with 168 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\nFrom the above results we can find the countries with highest hotel bookings and the ones with the least hotel bookings.  \n\nBut some of reservations are cancelled so let's find the actual number of stays.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhotelBookingsCompleteData %>%       \n  group_by(country) %>%\n  summarise(totalCancellations = sum(is_canceled))%>%\n  arrange(desc(totalCancellations))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 178 × 2\n   country totalCancellations\n   <chr>                <dbl>\n 1 PRT                  27519\n 2 GBR                   2453\n 3 ESP                   2177\n 4 FRA                   1934\n 5 ITA                   1333\n 6 DEU                   1218\n 7 IRL                    832\n 8 BRA                    830\n 9 USA                    501\n10 BEL                    474\n# … with 168 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n### Explain and Interpret\n\nFirstly I wanted to find which of the hotels is more popular ( City Hotel or the Resort Hotel ), from the data obtained it is very clear that the Resort Hotel on an average has more reservations both during the weekends and week-days, it also has less cancellations when compared to City Hotel.  \n\nI decided to find which country has a more successfull hotel business, it is clear that PRT has the highest number of hotel bookings.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}