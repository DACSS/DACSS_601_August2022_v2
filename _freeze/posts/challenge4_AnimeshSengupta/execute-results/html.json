{
  "hash": "b439743a9f1902789d610fc6d4b78636",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4\"\nauthor: \"Animesh Sengupta\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"08/18/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - Animesh Sengupta\n  - Debt in trillions data\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(skimr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   abc_poll.csv ⭐\n-   poultry_tidy.csv⭐⭐\n-   FedFundsRate.csv⭐⭐⭐\n-   hotel_bookings.csv⭐⭐⭐⭐\n-   debt_in_trillions ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\ndebt_data <- read_excel(\"../posts/_data/debt_in_trillions.xlsx\", .name_repair = \"universal\")\nhead(debt_data,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 8\n   Year.and.Quarter Mortgage HE.Revolving Auto.Loan Credit…¹ Stude…² Other Total\n   <chr>               <dbl>        <dbl>     <dbl>    <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                4.94        0.242     0.641    0.688   0.241 0.478  7.23\n 2 03:Q2                5.08        0.26      0.622    0.693   0.243 0.486  7.38\n 3 03:Q3                5.18        0.269     0.684    0.693   0.249 0.477  7.56\n 4 03:Q4                5.66        0.302     0.704    0.698   0.253 0.449  8.07\n 5 04:Q1                5.84        0.328     0.72     0.695   0.260 0.446  8.29\n 6 04:Q2                5.97        0.367     0.743    0.697   0.263 0.423  8.46\n 7 04:Q3                6.21        0.426     0.751    0.706   0.33  0.41   8.83\n 8 04:Q4                6.36        0.468     0.728    0.717   0.346 0.423  9.04\n 9 05:Q1                6.51        0.502     0.725    0.71    0.364 0.394  9.21\n10 05:Q2                6.70        0.528     0.774    0.717   0.374 0.402  9.49\n# … with abbreviated variable names ¹​Credit.Card, ²​Student.Loan\n```\n:::\n:::\n\n\n### Briefly describe the data\nThe data represents the debt statistics quarterly across different asset class. \n\n## Tidy Data (as needed)\n\nThe data is nearly tidy, we just need to mutate the Year and quarter column and make sure all the numerical values are uniform across the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(debt_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Year.and.Quarter\" \"Mortgage\"         \"HE.Revolving\"     \"Auto.Loan\"       \n[5] \"Credit.Card\"      \"Student.Loan\"     \"Other\"            \"Total\"           \n```\n:::\n\n```{.r .cell-code}\ndebt_data1 <- debt_data%>%\n  mutate(\n    Date= parse_date_time(Year.and.Quarter,\"yq\"),\n    across(where(is.numeric), round, 4)\n  )\nhead(debt_data1,20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 9\n   Year.and.Quarter Mortgage HE.Revolving Auto.Loan Credit…¹ Stude…² Other Total\n   <chr>               <dbl>        <dbl>     <dbl>    <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                4.94        0.242     0.641    0.688   0.241 0.478  7.23\n 2 03:Q2                5.08        0.26      0.622    0.693   0.243 0.486  7.38\n 3 03:Q3                5.18        0.269     0.684    0.693   0.249 0.477  7.56\n 4 03:Q4                5.66        0.302     0.704    0.698   0.253 0.449  8.07\n 5 04:Q1                5.84        0.328     0.72     0.695   0.260 0.446  8.29\n 6 04:Q2                5.97        0.367     0.743    0.697   0.263 0.423  8.46\n 7 04:Q3                6.21        0.426     0.751    0.706   0.33  0.41   8.83\n 8 04:Q4                6.36        0.468     0.728    0.717   0.346 0.423  9.04\n 9 05:Q1                6.51        0.502     0.725    0.71    0.364 0.394  9.21\n10 05:Q2                6.70        0.528     0.774    0.717   0.374 0.402  9.49\n11 05:Q3                6.91        0.541     0.83     0.732   0.378 0.405  9.79\n12 05:Q4                7.10        0.565     0.792    0.736   0.392 0.416 10.0 \n13 06:Q1                7.44        0.582     0.788    0.723   0.434 0.418 10.4 \n14 06:Q2                7.76        0.59      0.796    0.739   0.439 0.423 10.7 \n15 06:Q3                8.04        0.603     0.821    0.754   0.447 0.442 11.1 \n16 06:Q4                8.23        0.604     0.821    0.767   0.482 0.406 11.3 \n17 07:Q1                8.42        0.605     0.794    0.764   0.506 0.404 11.5 \n18 07:Q2                8.71        0.619     0.807    0.796   0.514 0.408 11.8 \n19 07:Q3                8.93        0.631     0.818    0.817   0.528 0.413 12.1 \n20 07:Q4                9.10        0.647     0.815    0.839   0.548 0.422 12.4 \n# … with 1 more variable: Date <dttm>, and abbreviated variable names\n#   ¹​Credit.Card, ²​Student.Loan\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\nAny additional comments?\nSo here we converted the 03:Q1 format of date to human readable date using the parse_date_time. Also , we rounded of all the numeric data to 4 decimal places for uniformity.\n\n## Identify variables that need to be mutated\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, are all time variables correctly coded as dates? Are all string variables reduced and cleaned to sensible categories? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt_checks<-debt_data1%>%rowwise()%>%\n  mutate(Expected_sum=sum(across(.cols=c(Mortgage,HE.Revolving,Auto.Loan,Credit.Card,Student.Loan,Other))),\n  Difference=abs(Total-Expected_sum))\n\nhead(debt_checks,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 11\n# Rowwise: \n   Year.and.Quarter Mortgage HE.Revolving Auto.Loan Credit…¹ Stude…² Other Total\n   <chr>               <dbl>        <dbl>     <dbl>    <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                4.94        0.242     0.641    0.688   0.241 0.478  7.23\n 2 03:Q2                5.08        0.26      0.622    0.693   0.243 0.486  7.38\n 3 03:Q3                5.18        0.269     0.684    0.693   0.249 0.477  7.56\n 4 03:Q4                5.66        0.302     0.704    0.698   0.253 0.449  8.07\n 5 04:Q1                5.84        0.328     0.72     0.695   0.260 0.446  8.29\n 6 04:Q2                5.97        0.367     0.743    0.697   0.263 0.423  8.46\n 7 04:Q3                6.21        0.426     0.751    0.706   0.33  0.41   8.83\n 8 04:Q4                6.36        0.468     0.728    0.717   0.346 0.423  9.04\n 9 05:Q1                6.51        0.502     0.725    0.71    0.364 0.394  9.21\n10 05:Q2                6.70        0.528     0.774    0.717   0.374 0.402  9.49\n# … with 3 more variables: Date <dttm>, Expected_sum <dbl>, Difference <dbl>,\n#   and abbreviated variable names ¹​Credit.Card, ²​Student.Loan\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\nAny additional comments?\nAs part of Sanity checks, calculation of total debt across column needs to be verified. Across() function was used rowwise to calculate the total debt and compared the absolute value between each other. As per the data, the difference is near to zero hence the total computations are veritable.\n",
    "supporting": [
      "challenge4_AnimeshSengupta_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}