{
  "hash": "673e5e6503e0b3932ee569d6bc27c9c9",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Instructions\"\nauthor: \"Meredith Rolfe\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readxl)\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organicpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xlsx ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.csv üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_weight<-read_csv(\"_data/animal_weight.csv\",\n                        show_col_types = FALSE)\n```\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA     738.    1211.\n2 USA      1990 NAFTA    1268.    1224.\n3 France   1980 EU       1856.     594.\n4 Mexico   1990 NAFTA    1768.     982.\n5 USA      1980 NAFTA     696.    1078.\n6 France   1990 EU       1012.    2294.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new data frame to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"abc\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction   abc\n   <chr>   <dbl> <chr> <chr>           <dbl>\n 1 Mexico   1980 NAFTA outgoing         738.\n 2 Mexico   1980 NAFTA incoming        1211.\n 3 USA      1990 NAFTA outgoing        1268.\n 4 USA      1990 NAFTA incoming        1224.\n 5 France   1980 EU    outgoing        1856.\n 6 France   1980 EU    incoming         594.\n 7 Mexico   1990 NAFTA outgoing        1768.\n 8 Mexico   1990 NAFTA incoming         982.\n 9 USA      1980 NAFTA outgoing         696.\n10 USA      1980 NAFTA incoming        1078.\n11 France   1990 EU    outgoing        1012.\n12 France   1990 EU    incoming        2294.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_weights <- read_csv('_data/animal_weight.csv')\nanimal_weights\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 √ó 17\n  IPCC A‚Ä¶¬π Cattl‚Ä¶¬≤ Cattl‚Ä¶¬≥ Buffa‚Ä¶‚Å¥ Swine‚Ä¶‚Åµ Swine‚Ä¶‚Å∂ Chick‚Ä¶‚Å∑ Chick‚Ä¶‚Å∏ Ducks Turkeys\n  <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n1 Indian ‚Ä¶     275     110     295      28      28     0.9     1.8   2.7     6.8\n2 Eastern‚Ä¶     550     391     380      50     180     0.9     1.8   2.7     6.8\n3 Africa       275     173     380      28      28     0.9     1.8   2.7     6.8\n4 Oceania      500     330     380      45     180     0.9     1.8   2.7     6.8\n5 Western‚Ä¶     600     420     380      50     198     0.9     1.8   2.7     6.8\n6 Latin A‚Ä¶     400     305     380      28      28     0.9     1.8   2.7     6.8\n7 Asia         350     391     380      50     180     0.9     1.8   2.7     6.8\n8 Middle ‚Ä¶     275     173     380      28      28     0.9     1.8   2.7     6.8\n9 Norther‚Ä¶     604     389     380      46     198     0.9     1.8   2.7     6.8\n# ‚Ä¶ with 7 more variables: Sheep <dbl>, Goats <dbl>, Horses <dbl>, Asses <dbl>,\n#   Mules <dbl>, Camels <dbl>, Llamas <dbl>, and abbreviated variable names\n#   ¬π‚Äã`IPCC Area`, ¬≤‚Äã`Cattle - dairy`, ¬≥‚Äã`Cattle - non-dairy`, ‚Å¥‚ÄãBuffaloes,\n#   ‚Åµ‚Äã`Swine - market`, ‚Å∂‚Äã`Swine - breeding`, ‚Å∑‚Äã`Chicken - Broilers`,\n#   ‚Å∏‚Äã`Chicken - Layers`\n# ‚Ñπ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\nObserved many animals have designated columns. So i will try pivot_longer to compress them into individual rows. lets see how long the dataset will be.\n\nI've used the pivot_longer to convert multiple animal rows to a single column with all the animal names, and all their values are in the 'values' column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_longer <- animal_weights %>% \n  pivot_longer(\"Cattle - dairy\" : 'Llamas', names_to='All_Animals', values_to='values')\n\nanimal_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 √ó 3\n   `IPCC Area`         All_Animals        values\n   <chr>               <chr>               <dbl>\n 1 Indian Subcontinent Cattle - dairy      275  \n 2 Indian Subcontinent Cattle - non-dairy  110  \n 3 Indian Subcontinent Buffaloes           295  \n 4 Indian Subcontinent Swine - market       28  \n 5 Indian Subcontinent Swine - breeding     28  \n 6 Indian Subcontinent Chicken - Broilers    0.9\n 7 Indian Subcontinent Chicken - Layers      1.8\n 8 Indian Subcontinent Ducks                 2.7\n 9 Indian Subcontinent Turkeys               6.8\n10 Indian Subcontinent Sheep                28  \n# ‚Ä¶ with 134 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\n# dim(animal_longer)\n```\n:::\n\n\nTo the converted dataset, I want to apply pivot_wider to spread out the country names to multiple columns, with its values. Now I ended up with a 16 \\* 10 tibble table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_longer %>% pivot_wider(names_from='IPCC Area', values_from='values')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 16 √ó 10\n   All_An‚Ä¶¬π India‚Ä¶¬≤ Easte‚Ä¶¬≥ Africa Oceania Weste‚Ä¶‚Å¥ Latin‚Ä¶‚Åµ  Asia Middl‚Ä¶‚Å∂ North‚Ä¶‚Å∑\n   <chr>      <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>\n 1 Cattle ‚Ä¶   275     550    275     500     600     400   350     275     604  \n 2 Cattle ‚Ä¶   110     391    173     330     420     305   391     173     389  \n 3 Buffalo‚Ä¶   295     380    380     380     380     380   380     380     380  \n 4 Swine -‚Ä¶    28      50     28      45      50      28    50      28      46  \n 5 Swine -‚Ä¶    28     180     28     180     198      28   180      28     198  \n 6 Chicken‚Ä¶     0.9     0.9    0.9     0.9     0.9     0.9   0.9     0.9     0.9\n 7 Chicken‚Ä¶     1.8     1.8    1.8     1.8     1.8     1.8   1.8     1.8     1.8\n 8 Ducks        2.7     2.7    2.7     2.7     2.7     2.7   2.7     2.7     2.7\n 9 Turkeys      6.8     6.8    6.8     6.8     6.8     6.8   6.8     6.8     6.8\n10 Sheep       28      48.5   28      48.5    48.5    28    48.5    28      48.5\n11 Goats       30      38.5   30      38.5    38.5    30    38.5    30      38.5\n12 Horses     238     377    238     377     377     238   377     238     377  \n13 Asses      130     130    130     130     130     130   130     130     130  \n14 Mules      130     130    130     130     130     130   130     130     130  \n15 Camels     217     217    217     217     217     217   217     217     217  \n16 Llamas     217     217    217     217     217     217   217     217     217  \n# ‚Ä¶ with abbreviated variable names ¬π‚ÄãAll_Animals, ¬≤‚Äã`Indian Subcontinent`,\n#   ¬≥‚Äã`Eastern Europe`, ‚Å¥‚Äã`Western Europe`, ‚Åµ‚Äã`Latin America`, ‚Å∂‚Äã`Middle east`,\n#   ‚Å∑‚Äã`Northern America`\n```\n:::\n:::\n\n\n## Eggs_tidy.csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_tidy <- read_csv('_data/eggs_tidy.csv')\neggs_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 √ó 6\n   month      year large_half_dozen large_dozen extra_large_half_dozen extra_l‚Ä¶¬π\n   <chr>     <dbl>            <dbl>       <dbl>                  <dbl>     <dbl>\n 1 January    2004             126         230                    132       230 \n 2 February   2004             128.        226.                   134.      230 \n 3 March      2004             131         225                    137       230 \n 4 April      2004             131         225                    137       234.\n 5 May        2004             131         225                    137       236 \n 6 June       2004             134.        231.                   137       241 \n 7 July       2004             134.        234.                   137       241 \n 8 August     2004             134.        234.                   137       241 \n 9 September  2004             130.        234.                   136.      241 \n10 October    2004             128.        234.                   136.      241 \n# ‚Ä¶ with 110 more rows, and abbreviated variable name ¬π‚Äãextra_large_dozen\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(eggs_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"month\"                  \"year\"                   \"large_half_dozen\"      \n[4] \"large_dozen\"            \"extra_large_half_dozen\" \"extra_large_dozen\"     \n```\n:::\n:::\n\n\nI want to compress everything from 3rd column to the last in a single column with its values included\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_longer <- eggs_tidy %>% \n  pivot_longer('large_half_dozen':'extra_large_dozen', values_to='Values')\neggs_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 4\n   month     year name                   Values\n   <chr>    <dbl> <chr>                   <dbl>\n 1 January   2004 large_half_dozen         126 \n 2 January   2004 large_dozen              230 \n 3 January   2004 extra_large_half_dozen   132 \n 4 January   2004 extra_large_dozen        230 \n 5 February  2004 large_half_dozen         128.\n 6 February  2004 large_dozen              226.\n 7 February  2004 extra_large_half_dozen   134.\n 8 February  2004 extra_large_dozen        230 \n 9 March     2004 large_half_dozen         131 \n10 March     2004 large_dozen              225 \n# ‚Ä¶ with 470 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nI want to have individual columns for months, hence using pivot_wider()\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_wider_month <- eggs_longer %>% \n  pivot_wider(names_from='month', values_from = 'Values')\neggs_wider\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'eggs_wider' not found\n```\n:::\n:::\n\n\npivot_wider() with year\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggs_wider_year <- eggs_longer %>% \n  pivot_wider(names_from='year', values_from='Values')\neggs_wider_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 √ó 12\n   month    name  `2004` `2005` `2006` `2007` `2008` `2009` `2010` `2011` `2012`\n   <chr>    <chr>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 January  larg‚Ä¶   126    128.   128.   128.    132   174.   174.   174.   174.\n 2 January  larg‚Ä¶   230    234.   234.   234.    237   278.   272.   268.   268.\n 3 January  extr‚Ä¶   132    136.   136.   136.    139   186.   186.   186.   186.\n 4 January  extr‚Ä¶   230    241    241    242.    245   286.   286.   286.   286.\n 5 February larg‚Ä¶   128.   128.   128.   131.    132   174.   174.   174.   174.\n 6 February larg‚Ä¶   226.   234.   234.   236.    237   278.   272.   268.   268.\n 7 February extr‚Ä¶   134.   136.   136.   138.    139   186.   186.   186.   186.\n 8 February extr‚Ä¶   230    241    241    244.    245   286.   286.   286.   288.\n 9 March    larg‚Ä¶   131    128.   128.   132     132   174.   174.   174.   174.\n10 March    larg‚Ä¶   225    234.   234.   237     237   278.   268    268.   268.\n# ‚Ä¶ with 38 more rows, and 1 more variable: `2013` <dbl>\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\n## USA Households\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusa_households<-read_excel('_data/USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx', skip=5)\nusa_households\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 382 √ó 16\n   `ALL RACES` ...2   ...3  ...4  ...5  ...6  ...7  ...8  ...9 ...10 ...11 ...12\n   <chr>       <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2019        1284‚Ä¶   100   9.1   8     8.3  11.7  16.5  12.3  15.5   8.3  10.3\n 2 2018        1285‚Ä¶   100  10.1   8.8   8.7  12    17    12.5  15     7.2   8.8\n 3 2017 2      1276‚Ä¶   100  10     9.1   9.2  12    16.4  12.4  14.7   7.3   8.9\n 4 2017        1275‚Ä¶   100  10.1   9.1   9.2  11.9  16.3  12.6  14.8   7.5   8.5\n 5 2016        1262‚Ä¶   100  10.4   9     9.2  12.3  16.7  12.2  15     7.2   8  \n 6 2015        1258‚Ä¶   100  10.6  10     9.6  12.1  16.1  12.4  14.9   7.1   7.2\n 7 2014        1245‚Ä¶   100  11.4  10.5   9.6  12.6  16.4  12.1  14     6.6   6.8\n 8 2013 3      1239‚Ä¶   100  11.4  10.3   9.5  12.5  16.8  12    13.9   6.7   6.9\n 9 2013 4      1229‚Ä¶   100  11.3  10.4   9.7  13.1  17    12.5  13.6   6.3   6  \n10 2012        1224‚Ä¶   100  11.4  10.6  10.1  12.5  17.4  12    13.9   6.3   5.9\n# ‚Ä¶ with 372 more rows, and 4 more variables: ...13 <dbl>, ...14 <dbl>,\n#   ...15 <chr>, ...16 <chr>\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nushh_orig <- read_excel(\"_data/USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx\",\n         skip=5,\n         n_max = 352,\n         col_names = c(\"year\", \"hholds\", \"del\",\n                       str_c(\"income\",1:9,sep=\"_i\"),\n                       \"median_inc\", \"median_se\", \n                       \"mean_inc\",\"mean_se\")) %>% \n  select(-del)\n  ushh_orig \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 352 √ó 15\n   year   hholds incom‚Ä¶¬π incom‚Ä¶¬≤ incom‚Ä¶¬≥ incom‚Ä¶‚Å¥ incom‚Ä¶‚Åµ incom‚Ä¶‚Å∂ incom‚Ä¶‚Å∑ incom‚Ä¶‚Å∏\n   <chr>  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 ALL R‚Ä¶ <NA>      NA      NA      NA      NA      NA      NA      NA      NA  \n 2 2019   128451     9.1     8       8.3    11.7    16.5    12.3    15.5     8.3\n 3 2018   128579    10.1     8.8     8.7    12      17      12.5    15       7.2\n 4 2017 2 127669    10       9.1     9.2    12      16.4    12.4    14.7     7.3\n 5 2017   127586    10.1     9.1     9.2    11.9    16.3    12.6    14.8     7.5\n 6 2016   126224    10.4     9       9.2    12.3    16.7    12.2    15       7.2\n 7 2015   125819    10.6    10       9.6    12.1    16.1    12.4    14.9     7.1\n 8 2014   124587    11.4    10.5     9.6    12.6    16.4    12.1    14       6.6\n 9 2013 3 123931    11.4    10.3     9.5    12.5    16.8    12      13.9     6.7\n10 2013 4 122952    11.3    10.4     9.7    13.1    17      12.5    13.6     6.3\n# ‚Ä¶ with 342 more rows, 5 more variables: income_i9 <dbl>, median_inc <dbl>,\n#   median_se <dbl>, mean_inc <chr>, mean_se <chr>, and abbreviated variable\n#   names ¬π‚Äãincome_i1, ¬≤‚Äãincome_i2, ¬≥‚Äãincome_i3, ‚Å¥‚Äãincome_i4, ‚Åµ‚Äãincome_i5,\n#   ‚Å∂‚Äãincome_i6, ‚Å∑‚Äãincome_i7, ‚Å∏‚Äãincome_i8\n# ‚Ñπ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nStill figuring out how to read excel sheets.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}