{
  "hash": "2292c02a57c8103e2552e8fc63e4c60c",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 \"\nauthor: \"Mekhala Kumar\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n  - organicpoultry\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Cleaning data and the reasoning for using pivot\n\nThe dataset used was organicpoultry. It contains information about the quantity of different poultry types for all months across the years 2004 to 2013. Currently the month and year data all fall under a single column. In order to make the data easy to interpret, first, the column with the data of the month and year need to be separated into two columns.\\\nFollowing which, the data needs to be pivoted in such a manner that the years become columns and the types of poultry become rows. This format will make it easier to select a subgroup within the types of poultry and compare the changes across years.\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\neggpoul <- read_excel(\"_data/organiceggpoultry.xls\",skip=4)\nView(eggpoul)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in .External2(C_dataviewer, x, title): unable to start data viewer\n```\n:::\n\n```{.r .cell-code}\ncolnames(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"...1\"                            \"Extra Large \\nDozen\"            \n [3] \"Extra Large 1/2 Doz.\\n1/2 Dozen\" \"Large \\nDozen\"                  \n [5] \"Large \\n1/2 Doz.\"                \"...6\"                           \n [7] \"Whole\"                           \"B/S Breast\"                     \n [9] \"Bone-in Breast\"                  \"Whole Legs\"                     \n[11] \"Thighs\"                         \n```\n:::\n\n```{.r .cell-code}\neggpoul=subset(eggpoul,select=-c(...6))\ntail(eggpoul, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 10\n   ...1     Extra…¹ Extra…² Large…³ Large…⁴ Whole B/S B…⁵ Bone-…⁶ Whole…⁷ Thighs\n   <chr>      <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> <chr>     <dbl> <chr> \n 1 March        290    188.    268.     178  238.    704. 390.5      204. 216.25\n 2 April        290    188.    268.     178  238.    704. 390.5      204. 216.25\n 3 May          290    188.    268.     178  238.    704. 390.5      204. 216.25\n 4 June         290    188.    268.     178  238.    704. 390.5      204. 216.25\n 5 July         290    188.    268.     178  238.    704. 390.5      204. 216.25\n 6 August       290    188.    268.     178  238.    704. 390.5      204. 216.25\n 7 Septemb…     290    188.    268.     178  238.    704. 390.5      204. 216.25\n 8 October      290    188.    268.     178  238.    704. 390.5      204. 216.25\n 9 November     290    188.    268.     178  238.    704. 390.5      204. 216.25\n10 December     290    188.    268.     178  238.    704. 390.5      204. 216.25\n# … with abbreviated variable names ¹​`Extra Large \\nDozen`,\n#   ²​`Extra Large 1/2 Doz.\\n1/2 Dozen`, ³​`Large \\nDozen`, ⁴​`Large \\n1/2 Doz.`,\n#   ⁵​`B/S Breast`, ⁶​`Bone-in Breast`, ⁷​`Whole Legs`\n```\n:::\n\n```{.r .cell-code}\nhead(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 10\n  ...1     Extra …¹ Extra…² Large…³ Large…⁴ Whole B/S B…⁵ Bone-…⁶ Whole…⁷ Thighs\n  <chr>       <dbl>   <dbl>   <dbl>   <dbl> <dbl>   <dbl> <chr>     <dbl> <chr> \n1 Jan 2004     230     132     230     126   198.    646. too few    194. too f…\n2 February     230     134.    226.    128.  198.    642. too few    194. 203   \n3 March        230     137     225     131   209     642. too few    194. 203   \n4 April        234.    137     225     131   212     642. too few    194. 203   \n5 May          236     137     225     131   214.    642. too few    194. 203   \n6 June         241     137     231.    134.  216.    641  too few    202. 200.3…\n# … with abbreviated variable names ¹​`Extra Large \\nDozen`,\n#   ²​`Extra Large 1/2 Doz.\\n1/2 Dozen`, ³​`Large \\nDozen`, ⁴​`Large \\n1/2 Doz.`,\n#   ⁵​`B/S Breast`, ⁶​`Bone-in Breast`, ⁷​`Whole Legs`\n```\n:::\n\n```{.r .cell-code}\nstr(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [120 × 10] (S3: tbl_df/tbl/data.frame)\n $ ...1                           : chr [1:120] \"Jan 2004\" \"February\" \"March\" \"April\" ...\n $ Extra Large \nDozen            : num [1:120] 230 230 230 234 236 ...\n $ Extra Large 1/2 Doz.\n1/2 Dozen: num [1:120] 132 134 137 137 137 ...\n $ Large \nDozen                  : num [1:120] 230 226 225 225 225 ...\n $ Large \n1/2 Doz.               : num [1:120] 126 128 131 131 131 ...\n $ Whole                          : num [1:120] 198 198 209 212 214 ...\n $ B/S Breast                     : num [1:120] 646 642 642 642 642 ...\n $ Bone-in Breast                 : chr [1:120] \"too few\" \"too few\" \"too few\" \"too few\" ...\n $ Whole Legs                     : num [1:120] 194 194 194 194 194 ...\n $ Thighs                         : chr [1:120] \"too few\" \"203\" \"203\" \"203\" ...\n```\n:::\n\n```{.r .cell-code}\neggpoul<-eggpoul%>%\n   mutate(`Bone-in Breast` = parse_number(na_if(`Bone-in Breast`, \"too few\")),\n           Thighs = parse_number(na_if(Thighs, \"too few\")))\neggpoul<-eggpoul %>% separate(1, c(\"Month\", \"Year\"), extra = \"drop\", fill = \"right\")\nvec<-rep(c(1,2,3,4,5,6,7,8,9,10),each=12)\neggpoul$Year[vec==1] <- 2004\neggpoul$Year[vec==2] <- 2005\neggpoul$Year[vec==3] <- 2006\neggpoul$Year[vec==4] <- 2007\neggpoul$Year[vec==5] <- 2008\neggpoul$Year[vec==6] <- 2009\neggpoul$Year[vec==7] <- 2010\neggpoul$Year[vec==8] <- 2011\neggpoul$Year[vec==9] <- 2012\neggpoul$Year[vec==10] <- 2013\ndim(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120  11\n```\n:::\n:::\n\n\n### Challenge: Describe the final dimensions\n\nThe original dataset has 120 rows and 11 columns. 2 of the variables are being used to identify a case. Hence,after pivoting, we expect to have 1080 rows and 4 columns. It is anticipated that the data will be long (taller).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(eggpoul) * (ncol(eggpoul)-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1080\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n(11-9)+2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n### Challenge: Pivot the Chosen Data\n\nAfter pivoting, the data has become taller. Pivoting has also ensured that all the variables of poultry types have been kept in a single column and the values corresponding to them are easy to access.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neggpoul<-pivot_longer(eggpoul, 3:11, names_to = \"Type of Poultry\", values_to = \"Amount\")\ndim(eggpoul)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1080    4\n```\n:::\n\n```{.r .cell-code}\nView(eggpoul)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in .External2(C_dataviewer, x, title): unable to start data viewer\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}