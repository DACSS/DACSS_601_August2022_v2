{
  "hash": "1ecc81dff96456cfaf355be5779839e2",
  "result": {
    "markdown": "---\ntitle: \"Nick Boonstra Challenge 1 Resubmit\"\nauthor: \"Nick Boonstra\"\ndesription: \"Reading in data and creating a post\"\ndate: \"08/16/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_1\n  - boonstra\n  - week_1\n  - birds\n---\n\n\n## Introduction\n\nThis challenge involves reading in and cleaning up data from the \"birds\" data set.\n\n#### Setup chunk\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Reading In and Cleaning Up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds<-read_csv(\"_data/birds.csv\")\nbirds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 14\n   Domain Cod…¹ Domain Area …² Area  Eleme…³ Element Item …⁴ Item  Year …⁵  Year\n   <chr>        <chr>    <dbl> <chr>   <dbl> <chr>     <dbl> <chr>   <dbl> <dbl>\n 1 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1961  1961\n 2 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1962  1962\n 3 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1963  1963\n 4 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1964  1964\n 5 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1965  1965\n 6 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1966  1966\n 7 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1967  1967\n 8 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1968  1968\n 9 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1969  1969\n10 QA           Live …       2 Afgh…    5112 Stocks     1057 Chic…    1970  1970\n# … with 30,967 more rows, 4 more variables: Unit <chr>, Value <dbl>,\n#   Flag <chr>, `Flag Description` <chr>, and abbreviated variable names\n#   ¹​`Domain Code`, ²​`Area Code`, ³​`Element Code`, ⁴​`Item Code`, ⁵​`Year Code`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n\nFortunately, all of the data came in tidy, meaning:\n\n-   Each column measured observations of only one variable;\n-   Each row provided values for only one observation; and,\n-   Each cell contained only one value.\n\n### Data Cleanup\n\nHowever, while every column was nominally tidy-compliant, a number of them were extraneous, in that they provided redundant or useless data. These columns, specifically, were \"Domain,\" \"Domain Code,\" \"Element,\" \"Element Code,\" \"Unit,\" and \"Year Code.\"\n\n\"Year Code\" was redundant, in that its values were equal to \"Year\" for every observation. Of course, attempting to verify this by hand would be borderline impossible, but luckily this was easily testable by some quick code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds_test <- read_csv(\"_data/birds.csv\")\nbirds_test <- birds_test %>%\n  mutate(year_test = case_when(\n    Year == `Year Code` ~ 1,\n    TRUE ~ 0\n  ))\ncount(birds_test,year_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  year_test     n\n      <dbl> <int>\n1         1 30977\n```\n:::\n\n```{.r .cell-code}\nrm(birds_test)\n```\n:::\n\n\nBecause the value of value of the dummy \"year_test\" variable is equal to 1 for all observations, we can know that \"Year Code\" was equal to \"Year\" for all observations, and thus eliminate \"Year Code\" without losing any information.\n\nIn the case of the other five columns named above, all observations contained the same value, making the columns practically useless. Once again, this assertion was easily testable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(birds,Domain)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Domain           n\n  <chr>        <int>\n1 Live Animals 30977\n```\n:::\n\n```{.r .cell-code}\ncount(birds,`Domain Code`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  `Domain Code`     n\n  <chr>         <int>\n1 QA            30977\n```\n:::\n\n```{.r .cell-code}\ncount(birds,Element)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Element     n\n  <chr>   <int>\n1 Stocks  30977\n```\n:::\n\n```{.r .cell-code}\ncount(birds,`Element Code`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  `Element Code`     n\n           <dbl> <int>\n1           5112 30977\n```\n:::\n\n```{.r .cell-code}\ncount(birds,Unit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  Unit          n\n  <chr>     <int>\n1 1000 Head 30977\n```\n:::\n:::\n\n\nThus, with each column only carrying one value throughout the data set, these columns could be deleted without pratically losing information. In this case, however, the values being removed from the dataframe are not already being kept somewhere else in the dataframe, as opposed to the duplication found in the Year/Year Code case. Thus, recording these values in a separate location may be desirable, depending upon the exact nature of the dataset and the desired analysis.\n\nBeyond removing these extraneous columns, the only other adjustments I found necessary were to rename the remaining columns to abide by \"snake_case.\" This was done for practicality (some of the column names had spaces), consistency, and personal preference.\n\nAll of these changes, then, are seen here:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds<-birds %>%\n  select(-starts_with(\"Domain\")) %>% ## All values identical for all obs\n  rename(area_code = `Area Code`) %>%\n  rename(area = Area) %>%\n  select(-starts_with(\"Element\")) %>% ## All values identical for all obs\n  rename(item_code = `Item Code`) %>%\n  rename(item = Item) %>%\n  select(-`Year Code`) %>% ## Values identical to Year for all obs\n  rename(year = Year) %>%\n  select(-Unit) %>% ## All values identical for all obs\n  rename(value = Value) %>%\n  rename(flag = Flag) %>%\n  rename(flag_desc = `Flag Description`)\n\nbirds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,977 × 8\n   area_code area        item_code item      year value flag  flag_desc    \n       <dbl> <chr>           <dbl> <chr>    <dbl> <dbl> <chr> <chr>        \n 1         2 Afghanistan      1057 Chickens  1961  4700 F     FAO estimate \n 2         2 Afghanistan      1057 Chickens  1962  4900 F     FAO estimate \n 3         2 Afghanistan      1057 Chickens  1963  5000 F     FAO estimate \n 4         2 Afghanistan      1057 Chickens  1964  5300 F     FAO estimate \n 5         2 Afghanistan      1057 Chickens  1965  5500 F     FAO estimate \n 6         2 Afghanistan      1057 Chickens  1966  5800 F     FAO estimate \n 7         2 Afghanistan      1057 Chickens  1967  6600 F     FAO estimate \n 8         2 Afghanistan      1057 Chickens  1968  6290 <NA>  Official data\n 9         2 Afghanistan      1057 Chickens  1969  6300 F     FAO estimate \n10         2 Afghanistan      1057 Chickens  1970  6000 F     FAO estimate \n# … with 30,967 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n## Describing the data\n\nThese data appear to be recording the populations of various types of birds across a number of countries and years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(birds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"area_code\" \"area\"      \"item_code\" \"item\"      \"year\"      \"value\"    \n[7] \"flag\"      \"flag_desc\"\n```\n:::\n\n```{.r .cell-code}\nbirds %>%\n  group_by(item) %>%\n  summarise(\"Median Values by Type\" = median(value,na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  item                   `Median Values by Type`\n  <chr>                                    <dbl>\n1 Chickens                                10784.\n2 Ducks                                     510 \n3 Geese and guinea fowls                    258 \n4 Pigeons, other birds                     2800 \n5 Turkeys                                   528 \n```\n:::\n\n```{.r .cell-code}\nbirds %>%\n  group_by(year) %>%\n  summarise(\"Median Values by Year\" = median(value,na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 58 × 2\n    year `Median Values by Year`\n   <dbl>                   <dbl>\n 1  1961                   1033 \n 2  1962                   1014 \n 3  1963                   1106 \n 4  1964                   1103 \n 5  1965                   1104 \n 6  1966                   1088.\n 7  1967                   1193 \n 8  1968                   1252.\n 9  1969                   1267 \n10  1970                   1259 \n# … with 48 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\nbirds %>%\n  group_by(area) %>%\n  summarise(\"Median Values by Area\" = median(value,na.rm=T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 248 × 2\n   area                `Median Values by Area`\n   <chr>                                 <dbl>\n 1 Afghanistan                          6700  \n 2 Africa                              12910. \n 3 Albania                              1300  \n 4 Algeria                                42.5\n 5 American Samoa                         38  \n 6 Americas                            66924. \n 7 Angola                               6075  \n 8 Antigua and Barbuda                    85  \n 9 Argentina                            2355  \n10 Armenia                              1528. \n# … with 238 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}