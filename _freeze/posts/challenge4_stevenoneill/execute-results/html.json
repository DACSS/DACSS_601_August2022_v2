{
  "hash": "b8f85d7095ffd4761e3428834dd4183a",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4 Instructions\"\nauthor: \"Steve O'Neill\"\ndesription: \"More data wrangling: pivoting\"\ndate: \"08/18/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n  - debt_in_trillions\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(zoo)\nlibrary(readxl)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Read in data\n\n-   debt_in_trillions ⭐⭐⭐⭐⭐\n\nI chose the debt_in_trillions dataset. I am going to use the `.name_repair` function to remove spaces from column names and replace them with periods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt <- read_excel(\"_data/debt_in_trillions.xlsx\",\n                  .name_repair = \"universal\")\ndebt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 8\n   Year.and.Quarter Mortgage HE.Revolving Auto.Loan Credit…¹ Stude…² Other Total\n   <chr>               <dbl>        <dbl>     <dbl>    <dbl>   <dbl> <dbl> <dbl>\n 1 03:Q1                4.94        0.242     0.641    0.688   0.241 0.478  7.23\n 2 03:Q2                5.08        0.26      0.622    0.693   0.243 0.486  7.38\n 3 03:Q3                5.18        0.269     0.684    0.693   0.249 0.477  7.56\n 4 03:Q4                5.66        0.302     0.704    0.698   0.253 0.449  8.07\n 5 04:Q1                5.84        0.328     0.72     0.695   0.260 0.446  8.29\n 6 04:Q2                5.97        0.367     0.743    0.697   0.263 0.423  8.46\n 7 04:Q3                6.21        0.426     0.751    0.706   0.33  0.41   8.83\n 8 04:Q4                6.36        0.468     0.728    0.717   0.346 0.423  9.04\n 9 05:Q1                6.51        0.502     0.725    0.71    0.364 0.394  9.21\n10 05:Q2                6.70        0.528     0.774    0.717   0.374 0.402  9.49\n# … with 64 more rows, and abbreviated variable names ¹​Credit.Card,\n#   ²​Student.Loan\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\nThis dataset contains debt in trillions based on fiscal year and quarter. It comes with a precalculated total for each of the 6 categories.\n\nThe column names are self-explanatory, except for HE.Revolving - that refers to home equity revolving lines of credit, also known as [HELOC](https://www.newyorkfed.org/medialibrary/interactives/householdcredit/data/pdf/hhdc_2019q4.pdf) debt.\n\n### Sanity check\n\nDo the totals for each category of debt add up according to the \"Total\" column? Let's see:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt %>% rowwise() %>% mutate(calculated_total = sum(c_across(\"Mortgage\":\"Other\"), na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 9\n# Rowwise: \n   Year.and.Quarter Mortgage HE.Re…¹ Auto.…² Credi…³ Stude…⁴ Other Total calcu…⁵\n   <chr>               <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl>   <dbl>\n 1 03:Q1                4.94   0.242   0.641   0.688   0.241 0.478  7.23    7.23\n 2 03:Q2                5.08   0.26    0.622   0.693   0.243 0.486  7.38    7.38\n 3 03:Q3                5.18   0.269   0.684   0.693   0.249 0.477  7.56    7.56\n 4 03:Q4                5.66   0.302   0.704   0.698   0.253 0.449  8.07    8.07\n 5 04:Q1                5.84   0.328   0.72    0.695   0.260 0.446  8.29    8.29\n 6 04:Q2                5.97   0.367   0.743   0.697   0.263 0.423  8.46    8.46\n 7 04:Q3                6.21   0.426   0.751   0.706   0.33  0.41   8.83    8.83\n 8 04:Q4                6.36   0.468   0.728   0.717   0.346 0.423  9.04    9.04\n 9 05:Q1                6.51   0.502   0.725   0.71    0.364 0.394  9.21    9.21\n10 05:Q2                6.70   0.528   0.774   0.717   0.374 0.402  9.49    9.49\n# … with 64 more rows, and abbreviated variable names ¹​HE.Revolving,\n#   ²​Auto.Loan, ³​Credit.Card, ⁴​Student.Loan, ⁵​calculated_total\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\nYes - it looks like `Total` and `calculated_total` are matching up, so I can rely on the original values.\n\n### Briefly describe the data\n\nThe data describes total household debt balance (in trillions) and its composition. It was published by the Federal Reserve Bank of New York and its source can be found [here](https://www.newyorkfed.org/medialibrary/interactives/householdcredit/data/xls/hhd_c_report_2022q2.xlsx)\n\n## Tidy-ness\n\nThe data seems tidy, but fiscal year is not the best format to do time-series analysis based on.\n\nThe `lubridate` package has helpful tools to get the quarter from each date... if you already have the full date. Here we just have the year and quarters, so I need to use the `zoo` package to get the first day of the quarter for that specific year.\n\nSo, using the `zoo` package, I can interpret the quarters as dates the following way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt2 <- debt %>% rowwise() %>% mutate(quarter_beginning_date = as.Date(as.yearqtr(Year.and.Quarter, format = \"%y:Q%q\")))\n```\n:::\n\n\nThis is  preferable to using complicated lookup tables or regular expressions.I don't mind the original Year.And.Quarter column so I am going to keep it rather than replacing it with `date`.\n\nIf preferred, I can also get the last date of the quarter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt2 <- debt2 %>% rowwise() %>% mutate(quarter_ending_date = as.Date(as.yearqtr(Year.and.Quarter, format = \"%y:Q%q\"), frac = 1))\n```\n:::\n\n\n### Time intervals\n\nLubridate supports [time intervals](https://lubridate.tidyverse.org/articles/lubridate.html#time-intervals), which is maybe a better idea:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt2 <- debt2 %>% rowwise() %>% mutate(quarter_interval = interval(quarter_beginning_date, quarter_ending_date))\n```\n:::\n\n\n## More observations\n\nThe percentage of student loan debt in proportion to total debt (per year) increased from 3.32% in Q1 of 2003 to 10.49% in Q1 of 2021. Ow!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndebt2 %>% group_by(quarter_interval) %>% mutate(Student.Loan.Percent = 100 * Student.Loan/Total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 74 × 12\n# Groups:   quarter_interval [74]\n   Year.and.Qua…¹ Mortg…² HE.Re…³ Auto.…⁴ Credi…⁵ Stude…⁶ Other Total quarter_…⁷\n   <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <dbl> <dbl> <date>    \n 1 03:Q1             4.94   0.242   0.641   0.688   0.241 0.478  7.23 2003-01-01\n 2 03:Q2             5.08   0.26    0.622   0.693   0.243 0.486  7.38 2003-04-01\n 3 03:Q3             5.18   0.269   0.684   0.693   0.249 0.477  7.56 2003-07-01\n 4 03:Q4             5.66   0.302   0.704   0.698   0.253 0.449  8.07 2003-10-01\n 5 04:Q1             5.84   0.328   0.72    0.695   0.260 0.446  8.29 2004-01-01\n 6 04:Q2             5.97   0.367   0.743   0.697   0.263 0.423  8.46 2004-04-01\n 7 04:Q3             6.21   0.426   0.751   0.706   0.33  0.41   8.83 2004-07-01\n 8 04:Q4             6.36   0.468   0.728   0.717   0.346 0.423  9.04 2004-10-01\n 9 05:Q1             6.51   0.502   0.725   0.71    0.364 0.394  9.21 2005-01-01\n10 05:Q2             6.70   0.528   0.774   0.717   0.374 0.402  9.49 2005-04-01\n# … with 64 more rows, 3 more variables: quarter_ending_date <date>,\n#   quarter_interval <Interval>, Student.Loan.Percent <dbl>, and abbreviated\n#   variable names ¹​Year.and.Quarter, ²​Mortgage, ³​HE.Revolving, ⁴​Auto.Loan,\n#   ⁵​Credit.Card, ⁶​Student.Loan, ⁷​quarter_beginning_date\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}