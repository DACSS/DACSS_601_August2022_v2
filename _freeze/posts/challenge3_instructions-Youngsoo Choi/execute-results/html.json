{
  "hash": "51fdca0a48b540d415a2eb6eb40daaeb",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3\"\nauthor: \"Young Soo Choi\"\ndesription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organicpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xlsx ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.csv üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the data regarding eggs\n\neggs <- read_csv(\"_data/eggs_tidy.csv\")\neggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 120 √ó 6\n   month      year large_half_dozen large_dozen extra_large_half_dozen extra_l‚Ä¶¬π\n   <chr>     <dbl>            <dbl>       <dbl>                  <dbl>     <dbl>\n 1 January    2004             126         230                    132       230 \n 2 February   2004             128.        226.                   134.      230 \n 3 March      2004             131         225                    137       230 \n 4 April      2004             131         225                    137       234.\n 5 May        2004             131         225                    137       236 \n 6 June       2004             134.        231.                   137       241 \n 7 July       2004             134.        234.                   137       241 \n 8 August     2004             134.        234.                   137       241 \n 9 September  2004             130.        234.                   136.      241 \n10 October    2004             128.        234.                   136.      241 \n# ‚Ä¶ with 110 more rows, and abbreviated variable name ¬π‚Äãextra_large_dozen\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThis dataset shows that the price of eggs categorizied by their size from 2004 I think. Because this data has 6 columns, it cannot be easily recognized at once. So I will pivot it. The 4 columns about the types will be pivoted to \"types\" column.\n\n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    1005.    -416.\n2 USA      1990 NAFTA    1210.    1473.\n3 France   1980 EU        437.    2058.\n4 Mexico   1990 NAFTA     972.     806.\n5 USA      1980 NAFTA    1962.    1305.\n6 France   1990 EU        262.     612.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 120\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(eggs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(eggs) * (ncol(eggs)-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 480\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nIn this 'eggs' dataset 2 of the variables are used to identify a case. So expected rows are 480 and columns are 4.\n\n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              1005.\n 2 Mexico   1980 NAFTA incoming              -416.\n 3 USA      1990 NAFTA outgoing              1210.\n 4 USA      1990 NAFTA incoming              1473.\n 5 France   1980 EU    outgoing               437.\n 6 France   1980 EU    incoming              2058.\n 7 Mexico   1990 NAFTA outgoing               972.\n 8 Mexico   1990 NAFTA incoming               806.\n 9 USA      1980 NAFTA outgoing              1962.\n10 USA      1980 NAFTA incoming              1305.\n11 France   1990 EU    outgoing               262.\n12 France   1990 EU    incoming               612.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pivot data\n\npivot_eggs<-pivot_longer(eggs,col=c(large_half_dozen, large_dozen, extra_large_half_dozen, extra_large_dozen), names_to=\"types\", values_to=\"price\")\npivot_eggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 4\n   month     year types                  price\n   <chr>    <dbl> <chr>                  <dbl>\n 1 January   2004 large_half_dozen        126 \n 2 January   2004 large_dozen             230 \n 3 January   2004 extra_large_half_dozen  132 \n 4 January   2004 extra_large_dozen       230 \n 5 February  2004 large_half_dozen        128.\n 6 February  2004 large_dozen             226.\n 7 February  2004 extra_large_half_dozen  134.\n 8 February  2004 extra_large_dozen       230 \n 9 March     2004 large_half_dozen        131 \n10 March     2004 large_dozen             225 \n# ‚Ä¶ with 470 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\n#change the order of columns\npivot_eggs<-pivot_eggs[c(2,1,3,4)]\npivot_eggs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 480 √ó 4\n    year month    types                  price\n   <dbl> <chr>    <chr>                  <dbl>\n 1  2004 January  large_half_dozen        126 \n 2  2004 January  large_dozen             230 \n 3  2004 January  extra_large_half_dozen  132 \n 4  2004 January  extra_large_dozen       230 \n 5  2004 February large_half_dozen        128.\n 6  2004 February large_dozen             226.\n 7  2004 February extra_large_half_dozen  134.\n 8  2004 February extra_large_dozen       230 \n 9  2004 March    large_half_dozen        131 \n10  2004 March    large_dozen             225 \n# ‚Ä¶ with 470 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nAny additional comments?\n\nIt has changed to 480 rows and 4 columns dataset.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}