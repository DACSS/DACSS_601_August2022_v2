{
  "hash": "3612610a8d62e26ba773c0e588e63df7",
  "result": {
    "markdown": "---\ntitle: \"601_final_project_jerinjacob\"\nauthor: \"Jerin Jacob\"\neditor: visual\ndescription: \"A study on the crime data of Massachusetts state\"\noutput: distill::distill_article\ndate: \"08/22/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  _final_project_601\n---\n\nCrimes are always a safety concern to any human being. The study of crime data will give us insights on how to not be a victim by choosing a place that is less prone to a crime activity. \n\nThis is a study on crime data of Massachusetts states. The dataset is a county based number of crimes at a location and time of the day. I am trying to compare the numbers of different counties in the state. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(hrbrthemes)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Reading the Data:\nAs there are 14 counties in Massachusetts, my data contains 14 separate county files to be read along with the population data of Massachusetts counties.\n\n::: {.cell}\n\n```{.r .cell-code}\nfilepath <- \"_data/601_final_project_jerin_jacob/\"\ncsv_file_names <- list.files(path = filepath, pattern = \"_2021*\")\n#csv_file_names\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nread_crimes<-function(file_name){\n  x<-unlist(str_split(file_name, pattern=\"[[:punct:]]\", n=3))\n  read_csv(paste0(filepath, file_name),\n           skip = 8, \n           col_names = c(\"Location\",\"6-9pm\",\"9-12pm\",\"12-3am\",\"3-6am\",\"6-9am\",\"9-12noon\",\"12-3pm\",\"3-6pm\"))%>%\n             mutate(County = x[1],\n                    Year = x[2])\n}\ncounties<-\n  purrr::map_dfr(csv_file_names, read_crimes)\nhead(counties)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n  Locat…¹ `6-9pm` 9-12p…² 12-3a…³ `3-6am` `6-9am` 9-12n…⁴ 12-3p…⁵ `3-6pm` County\n  <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr> \n1 All Lo…     969     661     430     190     607    1314    1421    1264 Barns…\n2 Reside…     456     314     190      94     287     661     703     629 Barns…\n3 Commer…     226     138      96      41     114     243     272     292 Barns…\n4 Air/Bu…       3      NA      NA      NA      NA       1       3       2 Barns…\n5 Bank/S…       4       2      NA       1      10      12      21      15 Barns…\n6 Bar/Ni…       2      11      13       1       2       1       4       4 Barns…\n# … with 1 more variable: Year <chr>, and abbreviated variable names ¹​Location,\n#   ²​`9-12pm`, ³​`12-3am`, ⁴​`9-12noon`, ⁵​`12-3pm`\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\n\nIn the dataset, there is a row for 'All Location Types'. I expected that to be same as the sum of all other Locations but it was not. This could be due to either data entry errors or overlapping/duplication of data in Locations with similar names. I could find 6 such Locations that duplicated. 'Commercial', 'Educational Facility', 'Government/Public Building and other', 'Road/Parking/Camps', 'Field/Woods/Waterways/Camps' and 'Construction/Industrial/Farm'. Those 6 Location types are just grouping of two or more other Location Types.\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_county <- counties %>%\n  slice(1:54)\nfirst_county\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 54 × 11\n   Location      `6-9pm` 9-12p…¹ 12-3a…² `3-6am` `6-9am` 9-12n…³ 12-3p…⁴ `3-6pm`\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 \"All Locatio…     969     661     430     190     607    1314    1421    1264\n 2 \"Residence/H…     456     314     190      94     287     661     703     629\n 3 \"Commercial\"      226     138      96      41     114     243     272     292\n 4 \"Air/Bus/Tra…       3      NA      NA      NA      NA       1       3       2\n 5 \"Bank/Saving…       4       2      NA       1      10      12      21      15\n 6 \"Bar/Nightcl…       2      11      13       1       2       1       4       4\n 7 \"Commercial/…      37       8       5       2      27      67      44      49\n 8 \"Convenience…      26      14       5       4       7      15      14      22\n 9 \"Department/…      19       1       2       1       6       8      36      38\n10 \"Drug Store/…      19       9       9       3      13      26      16      19\n# … with 44 more rows, 2 more variables: County <chr>, Year <chr>, and\n#   abbreviated variable names ¹​`9-12pm`, ²​`12-3am`, ³​`9-12noon`, ⁴​`12-3pm`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n```{.r .cell-code}\nfirst_county2 <- first_county %>%\n  slice(2:54)\nmapply(sum,first_county2[,c(2:9)], na.rm= TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   6-9pm   9-12pm   12-3am    3-6am    6-9am 9-12noon   12-3pm    3-6pm \n    1406      944      629      271      868     1858     2008     1803 \n```\n:::\n:::\n\n\nSo I checked by droping those Locations for the Barnstable County. Now the sum of the locations is same as that of 'All Location Types'.\n\n::: {.cell}\n\n```{.r .cell-code}\ndfRemain <- first_county[-c(3, 22,27,42,47,38), ]\n\n\ndfRemain\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 × 11\n   Location      `6-9pm` 9-12p…¹ 12-3a…² `3-6am` `6-9am` 9-12n…³ 12-3p…⁴ `3-6pm`\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 \"All Locatio…     969     661     430     190     607    1314    1421    1264\n 2 \"Residence/H…     456     314     190      94     287     661     703     629\n 3 \"Air/Bus/Tra…       3      NA      NA      NA      NA       1       3       2\n 4 \"Bank/Saving…       4       2      NA       1      10      12      21      15\n 5 \"Bar/Nightcl…       2      11      13       1       2       1       4       4\n 6 \"Commercial/…      37       8       5       2      27      67      44      49\n 7 \"Convenience…      26      14       5       4       7      15      14      22\n 8 \"Department/…      19       1       2       1       6       8      36      38\n 9 \"Drug Store/…      19       9       9       3      13      26      16      19\n10 \"Grocery/Sup…      24       3      NA       1       7      26      23      27\n# … with 38 more rows, 2 more variables: County <chr>, Year <chr>, and\n#   abbreviated variable names ¹​`9-12pm`, ²​`12-3am`, ³​`9-12noon`, ⁴​`12-3pm`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n\n```{.r .cell-code}\nall_location <- dfRemain[c(1), ]\nall_location %>%\n  select(2:9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  `6-9pm` `9-12pm` `12-3am` `3-6am` `6-9am` `9-12noon` `12-3pm` `3-6pm`\n    <dbl>    <dbl>    <dbl>   <dbl>   <dbl>      <dbl>    <dbl>   <dbl>\n1     969      661      430     190     607       1314     1421    1264\n```\n:::\n\n```{.r .cell-code}\ndf <-  dfRemain[-c(1), ]\nmapply(sum,df[,c(2:9)], na.rm= TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   6-9pm   9-12pm   12-3am    3-6am    6-9am 9-12noon   12-3pm    3-6pm \n     969      661      430      190      607     1314     1421     1264 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_county_data<-subset(counties, Location != 'Commercial' & Location !='Educational Facility' & Location != 'Government/Public Building and other' & Location != 'Road/Parking/Camps' & Location != 'Field/Woods/Waterways/Camps' & Location != 'Construction/Industrial/Farm' & Location != 'All Location Types')\nnew_county_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 658 × 11\n   Location      `6-9pm` 9-12p…¹ 12-3a…² `3-6am` `6-9am` 9-12n…³ 12-3p…⁴ `3-6pm`\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 \"Residence/H…     456     314     190      94     287     661     703     629\n 2 \"Air/Bus/Tra…       3      NA      NA      NA      NA       1       3       2\n 3 \"Bank/Saving…       4       2      NA       1      10      12      21      15\n 4 \"Bar/Nightcl…       2      11      13       1       2       1       4       4\n 5 \"Commercial/…      37       8       5       2      27      67      44      49\n 6 \"Convenience…      26      14       5       4       7      15      14      22\n 7 \"Department/…      19       1       2       1       6       8      36      38\n 8 \"Drug Store/…      19       9       9       3      13      26      16      19\n 9 \"Grocery/Sup…      24       3      NA       1       7      26      23      27\n10 \"Hotel/Motel…      36      30      18      26      13      31      39      21\n# … with 648 more rows, 2 more variables: County <chr>, Year <chr>, and\n#   abbreviated variable names ¹​`9-12pm`, ²​`12-3am`, ³​`9-12noon`, ⁴​`12-3pm`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(counties)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 756  11\n```\n:::\n:::\n\n\nAnalysing just the number of crimes in a location in a county will be meaningless. I am taking the total population of each counties as a baseline for comparing the number of crimes in the respective counties.\n\nReading the MA population data.\n\n::: {.cell}\n\n```{.r .cell-code}\nma_population <- read_csv('_data/601_final_project_jerin_jacob/MA_population.csv', col_names = c(\"Number\", \"County\", \"Population\"))\nma_population$County <- word(ma_population$County, 1)\nma_population <- ma_population[ -c(1) ]\nma_population\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   County     Population\n   <chr>           <dbl>\n 1 Middlesex     1605899\n 2 Worcester      826655\n 3 Suffolk        801162\n 4 Essex          787038\n 5 Norfolk        703740\n 6 Bristol        563301\n 7 Plymouth       518597\n 8 Hampden        466647\n 9 Barnstable     213505\n10 Hampshire      161361\n11 Berkshire      125927\n12 Franklin        70529\n13 Dukes           17430\n14 Nantucket       11212\n```\n:::\n:::\n\n\nJoining the crime data for 2021 with the population dataset of Massachusetts\n\n::: {.cell}\n\n```{.r .cell-code}\nma_crime_2021 <- new_county_data %>% left_join(ma_population,by=\"County\")\n```\n:::\n\n\n\nThe number of crimes per 1000 people in the county can be a good way to start with the analysis.\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_per_population <- ma_crime_2021 %>%  \n    mutate(across(c(2:9),\n           .fns = ~./(Population/1000)))\ncrime_per_population\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 658 × 12\n   Location  `6-9pm` `9-12pm` `12-3am`  `3-6am`  `6-9am` 9-12n…¹ 12-3p…² `3-6pm`\n   <chr>       <dbl>    <dbl>    <dbl>    <dbl>    <dbl>   <dbl>   <dbl>   <dbl>\n 1 \"Residen… 2.14     1.47     0.890    0.440    1.34    3.10     3.29   2.95   \n 2 \"Air/Bus… 0.0141  NA       NA       NA       NA       0.00468  0.0141 0.00937\n 3 \"Bank/Sa… 0.0187   0.00937 NA        0.00468  0.0468  0.0562   0.0984 0.0703 \n 4 \"Bar/Nig… 0.00937  0.0515   0.0609   0.00468  0.00937 0.00468  0.0187 0.0187 \n 5 \"Commerc… 0.173    0.0375   0.0234   0.00937  0.126   0.314    0.206  0.230  \n 6 \"Conveni… 0.122    0.0656   0.0234   0.0187   0.0328  0.0703   0.0656 0.103  \n 7 \"Departm… 0.0890   0.00468  0.00937  0.00468  0.0281  0.0375   0.169  0.178  \n 8 \"Drug St… 0.0890   0.0422   0.0422   0.0141   0.0609  0.122    0.0749 0.0890 \n 9 \"Grocery… 0.112    0.0141  NA        0.00468  0.0328  0.122    0.108  0.126  \n10 \"Hotel/M… 0.169    0.141    0.0843   0.122    0.0609  0.145    0.183  0.0984 \n# … with 648 more rows, 3 more variables: County <chr>, Year <chr>,\n#   Population <dbl>, and abbreviated variable names ¹​`9-12noon`, ²​`12-3pm`\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime_per_population <- pivot_longer(crime_per_population, `6-9pm`:`3-6pm`, names_to = \"Time_of_day\", values_to = \"Crime_rate\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- crime_per_population[ -c(3,4) ]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Location            County          Time_of_day          Crime_rate    \n Length:5264        Length:5264        Length:5264        Min.   :0.0006  \n Class :character   Class :character   Class :character   1st Qu.:0.0064  \n Mode  :character   Mode  :character   Mode  :character   Median :0.0281  \n                                                          Mean   :0.1415  \n                                                          3rd Qu.:0.0953  \n                                                          Max.   :5.0916  \n                                                          NA's   :1970    \n```\n:::\n:::\n\n\nAccording to the data, the safest place in Massachusetts is an Air/Bus/Train Terminal in Middlesex at 12-3 am. Apparently, residences of Hampden between 3-6 pm turns out to be the most unsafe place or where most crimes happen.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[which.max(df$Crime_rate),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  Location       County  Time_of_day Crime_rate\n  <chr>          <chr>   <chr>            <dbl>\n1 Residence/Home Hampden 3-6pm             5.09\n```\n:::\n\n```{.r .cell-code}\ndf[which.min(df$Crime_rate),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  Location               County    Time_of_day Crime_rate\n  <chr>                  <chr>     <chr>            <dbl>\n1 Air/Bus/Train Terminal Middlesex 12-3am        0.000623\n```\n:::\n:::\n\nChecking whether all locations in Hampden have high crime rates and if Middlesex is safe in all locations.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_middlesex <- df %>%\n  filter(County == \"Middlesex\")\n\nggplot(df_middlesex, aes(x=Time_of_day, y=Crime_rate)) +\n  geom_segment( aes(x=Time_of_day, xend=Time_of_day, y=0, yend=Crime_rate)) +\n  geom_point( size=5, color=\"red\", fill=alpha(\"orange\", 0.3), alpha=0.7, shape=21, stroke=2) \n```\n\n::: {.cell-output-display}\n![](601_final_project_jerin_jacob_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndf_hampden <- df %>%\n  filter(County == \"Hampden\")\n\nggplot(df_hampden, aes(x=Time_of_day, y=Crime_rate)) +\n  geom_segment( aes(x=Time_of_day, xend=Time_of_day, y=0, yend=Crime_rate)) +\n  geom_point( size=5, color=\"red\", fill=alpha(\"orange\", 0.3), alpha=0.7, shape=21, stroke=2)\n```\n\n::: {.cell-output-display}\n![](601_final_project_jerin_jacob_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% ggplot(aes(Time_of_day, Crime_rate, color=County)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](601_final_project_jerin_jacob_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(fill=County, y=Crime_rate, x=Time_of_day)) + \n    geom_bar(position=\"stack\", stat=\"identity\")\n```\n\n::: {.cell-output-display}\n![](601_final_project_jerin_jacob_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "601_final_project_jerin_jacob_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}