{
  "hash": "239857c6a50dfb93a284618d3f79a0a8",
  "result": {
    "markdown": "---\ntitle: \"Challenge 5 Instructions\"\nauthor: \"Yakub Rabiutheen\"\ndescription: \"Introduction to Visualization\"\ndate: \"08/29/2022\"\nformat:\n  html:\n    toc: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_5\n  - railroads\n  - cereal\n  - air_bnb\n  - pathogen_cost\n  - australian_marriage\n  - public_schools\n  - usa_hh\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  mutate variables as needed (including sanity checks)\n4)  create at least two univariate visualizations\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n5)  Create at least one bivariate visualization\n   - try to make them \"publication\" ready\n   - Explain why you choose the specific graph type\n\n[R Graph Gallery](https://r-graph-gallery.com/) is a good starting point for thinking about what information is conveyed in standard graph types, and includes example R code.\n\n(be sure to only include the category tags for the data you use!)\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   cereal ⭐\n-   pathogen cost ⭐\n-   Australian Marriage ⭐⭐ \n-   AB_NYC_2019.csv ⭐⭐⭐\n-   railroads ⭐⭐⭐\n-   Public School Characteristics ⭐⭐⭐⭐ \n-   USA Households ⭐⭐⭐⭐⭐\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nAB_NYC <- read_csv(\"_data/AB_NYC_2019.csv\")\n```\n:::\n\n\n### Briefly describe the data\n\n## Tidy Data (as needed)\n\nIs your data already tidy, or is there work to be done? Be sure to anticipate your end result to provide a sanity check, and document your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(AB_NYC)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 16\n     id name       host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n  <dbl> <chr>        <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n1  2539 Clean & q…    2787 John    Brookl… Kensin…    40.6   -74.0 Privat…   149\n2  2595 Skylit Mi…    2845 Jennif… Manhat… Midtown    40.8   -74.0 Entire…   225\n3  3647 THE VILLA…    4632 Elisab… Manhat… Harlem     40.8   -73.9 Privat…   150\n4  3831 Cozy Enti…    4869 LisaRo… Brookl… Clinto…    40.7   -74.0 Entire…    89\n5  5022 Entire Ap…    7192 Laura   Manhat… East H…    40.8   -73.9 Entire…    80\n6  5099 Large Coz…    7322 Chris   Manhat… Murray…    40.7   -74.0 Entire…   200\n# … with 6 more variables: minimum_nights <dbl>, number_of_reviews <dbl>,\n#   last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n:::\n\n\nAre there any variables that require mutation to be usable in your analysis stream? For example, do you need to calculate new values in order to graph them? Can string values be represented numerically? Do you need to turn any variables into factors and reorder for ease of graphics and visualization?\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_analysis <- AB_NYC %>% select(neighbourhood_group,room_type,price,minimum_nights)\n```\n:::\n\n\n## Univariate Visualizations\n\n\nSince this was a single variable I wanted to  look at, I wanted to see which neighborhood had the largest amount of Units.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(price_analysis, mapping = aes(x = neighbourhood_group)) +\n  geom_bar(fill = \"red\") +\n  labs(title = \"# of Unit Listings per Neighboorhood\", x = \"Neighboorhood\", y = \"Number of Units\")\n```\n\n::: {.cell-output-display}\n![](Yakub_Rabiutheen_challenge5_instructions_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Bivariate Visualization(s)\nAny additional comments?\n\nI Kinda did a a Tri-Variate Visualization. I wanted to find the prices of all Room Types by Neighborhoods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(price_analysis, mapping = aes(x = room_type,y=price,color=\"room_type\")) +\n  geom_point() +\n  facet_wrap(vars(neighbourhood_group)) +\n  labs(title = \"Room Type by Neighbourhoods\", x = \"Room Type\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](Yakub_Rabiutheen_challenge5_instructions_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\nAlso just wanted to do a table analysis of Room Type and Neighborhood Group.\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(price_analysis$neighbourhood_group,price_analysis$room_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               \n                Entire home/apt Private room Shared room\n  Bronx                     379          652          60\n  Brooklyn                 9559        10132         413\n  Manhattan               13199         7982         480\n  Queens                   2096         3372         198\n  Staten Island             176          188           9\n```\n:::\n:::\n\n\n\n \nI also did a Table Function to see Chi-Square Contribution.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gmodels)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(gmodels): there is no package called 'gmodels'\n```\n:::\n\n```{.r .cell-code}\nCrossTable(price_analysis$neighbourhood_group,price_analysis$room_type)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in CrossTable(price_analysis$neighbourhood_group, price_analysis$room_type): could not find function \"CrossTable\"\n```\n:::\n:::\n",
    "supporting": [
      "Yakub_Rabiutheen_challenge5_instructions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}