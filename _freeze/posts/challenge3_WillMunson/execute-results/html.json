{
  "hash": "6ac3ce1caba81b9ab968f7b55c78c10d",
  "result": {
    "markdown": "---\ntitle: \"Challenge 3 Will Munson\"\nauthor: \"Will Munson\"\ndescription: \"Tidy Data: Pivoting\"\ndate: \"08/17/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_3\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2.  identify what needs to be done to tidy the current data\n3.  anticipate the shape of pivoted data\n4.  pivot the data into tidy format using `pivot_longer`\n\n## Read in data\n\nRead in one (or more) of the following datasets, using the correct R package and command.\n\n-   animal_weights.csv ‚≠ê\n-   eggs_tidy.csv ‚≠ê‚≠ê or organicpoultry.xls ‚≠ê‚≠ê‚≠ê\n-   australian_marriage\\*.xlsx ‚≠ê‚≠ê‚≠ê\n-   USA Households\\*.xlsx ‚≠ê‚≠ê‚≠ê‚≠ê\n-   sce_labor_chart_data_public.csv üåüüåüüåüüåüüåü\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_weight<-read_csv(\"_data/animal_weight.csv\",\n                        show_col_types = FALSE)\n```\n:::\n\n\n### Briefly describe the data\n\nDescribe the data, and be sure to comment on why you are planning to pivot it to make it \"tidy\"\n\n    Okay, so this data is basically explained by both the row AND the column. The observed variables (Item and Weight) are not listed, and instead, we see the items listed as variables for each column, and each weight represents these variables. What we need to do is reorganize this dataset so that there are columns that represent each variable. There should be three columns instead of 17.\n    \n## Anticipate the End Result\n\nThe first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.\n\nOne easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.\n\nSuppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!\n\n### Example: find current and future data dimensions\n\nLets see if this works with a simple example.\n\n\n::: {.cell tbl-cap='Example'}\n\n```{.r .cell-code}\ndf<-tibble(country = rep(c(\"Mexico\", \"USA\", \"France\"),2),\n           year = rep(c(1980,1990), 3), \n           trade = rep(c(\"NAFTA\", \"NAFTA\", \"EU\"),2),\n           outgoing = rnorm(6, mean=1000, sd=500),\n           incoming = rlogis(6, location=1000, \n                             scale = 400))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 5\n  country  year trade outgoing incoming\n  <chr>   <dbl> <chr>    <dbl>    <dbl>\n1 Mexico   1980 NAFTA    1677.     466.\n2 USA      1990 NAFTA    1291.    1340.\n3 France   1980 EU        544.    3441.\n4 Mexico   1990 NAFTA     659.    1271.\n5 USA      1980 NAFTA    1081.     505.\n6 France   1990 EU        634.    1045.\n```\n:::\n\n```{.r .cell-code}\n#existing rows/cases\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#existing columns/cases\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#expected rows/cases\nnrow(df) * (ncol(df)-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n# expected columns \n3 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nOr simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new dataframe to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.\n\n### Challenge: Describe the final dimensions\n\nDocument your work here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nncol(animal_weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\n#Number of rows\nnrow(animal_weight)*(ncol(animal_weight)-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 144\n```\n:::\n:::\n\n\nAny additional comments?\n    There are way too many columns in the original dataset. Let's change this so we only get three of them. \n## Pivot the Data\n\nNow we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a \"sanity\" check.\n\n### Example\n\n\n::: {.cell tbl-cap='Pivoted Example'}\n\n```{.r .cell-code}\ndf<-pivot_longer(df, col = c(outgoing, incoming),\n                 names_to=\"trade_direction\",\n                 values_to = \"trade_value\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 √ó 5\n   country  year trade trade_direction trade_value\n   <chr>   <dbl> <chr> <chr>                 <dbl>\n 1 Mexico   1980 NAFTA outgoing              1677.\n 2 Mexico   1980 NAFTA incoming               466.\n 3 USA      1990 NAFTA outgoing              1291.\n 4 USA      1990 NAFTA incoming              1340.\n 5 France   1980 EU    outgoing               544.\n 6 France   1980 EU    incoming              3441.\n 7 Mexico   1990 NAFTA outgoing               659.\n 8 Mexico   1990 NAFTA incoming              1271.\n 9 USA      1980 NAFTA outgoing              1081.\n10 USA      1980 NAFTA incoming               505.\n11 France   1990 EU    outgoing               634.\n12 France   1990 EU    incoming              1045.\n```\n:::\n:::\n\n\nYes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!\n\n### Challenge: Pivot the Chosen Data\n\nDocument your work here. What will a new \"case\" be once you have pivoted the data? How does it meet requirements for tidy data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimal_weight <- pivot_longer(animal_weight, col = c(`Cattle - dairy`, `Cattle - non-dairy`, Buffaloes, `Swine - market`, `Swine - breeding`, `Chicken - Broilers`, `Chicken - Layers`, Ducks, Turkeys, Sheep, Goats, Horses, Asses, Mules, Camels, Llamas),\n                              names_to = \"Animal Type\",\n                              values_to = \"Weight in lb\")\n\nanimal_weight\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 √ó 3\n   `IPCC Area`         `Animal Type`      `Weight in lb`\n   <chr>               <chr>                       <dbl>\n 1 Indian Subcontinent Cattle - dairy              275  \n 2 Indian Subcontinent Cattle - non-dairy          110  \n 3 Indian Subcontinent Buffaloes                   295  \n 4 Indian Subcontinent Swine - market               28  \n 5 Indian Subcontinent Swine - breeding             28  \n 6 Indian Subcontinent Chicken - Broilers            0.9\n 7 Indian Subcontinent Chicken - Layers              1.8\n 8 Indian Subcontinent Ducks                         2.7\n 9 Indian Subcontinent Turkeys                       6.8\n10 Indian Subcontinent Sheep                        28  \n# ‚Ä¶ with 134 more rows\n# ‚Ñπ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\nAny additional comments?\n\n    This was a very valuable lesson to learn when it comes to working with data in R. While it may seem more aesthetically pleasing to look at a dataset where you have variables in both the first row and the first column, it's not the most efficient way to analyze the data. ",
    "supporting": [
      "challenge3_WillMunson_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}