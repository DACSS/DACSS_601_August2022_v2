{
  "hash": "03661b388725599184501e4f7f844474",
  "result": {
    "markdown": "---\ntitle: \"Challenge 4 Submission\"\nauthor: \"Nick Boonstra\"\ndescription: \"More data wrangling: pivoting\"\ndate: \"08/21/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - challenge_4\n---\n\n\n## Introduction\n\nToday's challenge introduces the `mutate()` function as an additional tool in \nthe data-wrangling process. I will be using the \"FedFundsRate\" data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n:::\n\n\n## Challenge Overview\n\nToday's challenge is to:\n\n1)  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)\n2)  tidy data (as needed, including sanity checks)\n3)  identify variables that need to be mutated\n4)  mutate variables and sanity check all mutations\n\n## Read in data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfed <- read_csv(\n  file = \"_data/FedFundsRate.csv\",\n  skip = 1,\n  col_names = c(\"year\",\"month\",\"day\",\"fedfunds_target\",\"fedfunds_upper\",\"fedfunds_lower\",\n                \"fedfunds_eff\",\"gdp_change\",\"unemploy_rate\",\"inflation_rate\")\n  )\n\nfed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 904 × 10\n    year month   day fedfunds_…¹ fedfu…² fedfu…³ fedfu…⁴ gdp_c…⁵ unemp…⁶ infla…⁷\n   <dbl> <dbl> <dbl>       <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1  1954     7     1          NA      NA      NA    0.8      4.6     5.8      NA\n 2  1954     8     1          NA      NA      NA    1.22    NA       6        NA\n 3  1954     9     1          NA      NA      NA    1.06    NA       6.1      NA\n 4  1954    10     1          NA      NA      NA    0.85     8       5.7      NA\n 5  1954    11     1          NA      NA      NA    0.83    NA       5.3      NA\n 6  1954    12     1          NA      NA      NA    1.28    NA       5        NA\n 7  1955     1     1          NA      NA      NA    1.39    11.9     4.9      NA\n 8  1955     2     1          NA      NA      NA    1.29    NA       4.7      NA\n 9  1955     3     1          NA      NA      NA    1.35    NA       4.6      NA\n10  1955     4     1          NA      NA      NA    1.43     6.7     4.7      NA\n# … with 894 more rows, and abbreviated variable names ¹​fedfunds_target,\n#   ²​fedfunds_upper, ³​fedfunds_lower, ⁴​fedfunds_eff, ⁵​gdp_change,\n#   ⁶​unemploy_rate, ⁷​inflation_rate\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n### Briefly describe the data\n\nThis data set is not far from being tidy. Once the data set is tidy, there will be four columns: one for the date of the observation, one for the specific rate in question, one to describe what it is about that rate that is being observed, and one to provide the value of the given rate. When I read in the data, I renamed the columns with this tidying in mind.\n\n## Tidying and Wrangling \n\nOne inconvenience about this data set is that the year, month, and date of each observation each exist in their own columns, rather than there being one single column for the date. Fortunately, the `lubridate` package provides a simple work-around for this with the `make_date()` function.\n\nWhen we `pivot_longer()` the data, we are going to take every column but the date (we will `select()` out the individual year/month/day columns once we've generated our date column) and pivot them into two columns: one for rate_type, and one for value. Then, we will take one further step and use the `separate()` function to split rate_type into two separate columns, one for each variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfed <- fed %>% \n  mutate(date=make_date(year,month,day)) %>% \n  select(-c(year,month,day)) %>% \n  pivot_longer(\n    cols=!date,\n    names_to=\"rate_type\",\n    values_to=\"val\"\n  ) %>% \n  separate(col=rate_type,into=c(\"rate\",\"type\")) \n\nfed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,328 × 4\n   date       rate      type     val\n   <date>     <chr>     <chr>  <dbl>\n 1 1954-07-01 fedfunds  target  NA  \n 2 1954-07-01 fedfunds  upper   NA  \n 3 1954-07-01 fedfunds  lower   NA  \n 4 1954-07-01 fedfunds  eff      0.8\n 5 1954-07-01 gdp       change   4.6\n 6 1954-07-01 unemploy  rate     5.8\n 7 1954-07-01 inflation rate    NA  \n 8 1954-08-01 fedfunds  target  NA  \n 9 1954-08-01 fedfunds  upper   NA  \n10 1954-08-01 fedfunds  lower   NA  \n# … with 6,318 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::",
    "supporting": [
      "challenge4_nickboonstra_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}