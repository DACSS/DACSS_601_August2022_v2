---
title: "Challenge 3 Instructions"
author: "Meredith Rolfe"
desription: "Tidy Data: Pivoting"
date: "08/17/2022"
format:
  html:
    toc: true
    code-fold: true
    code-copy: true
    code-tools: true
categories:
  - challenge_3
---

```{r}
#| label: setup
#| warning: false
#| message: false

library(tidyverse)
library(readxl)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

## Challenge Overview

Today's challenge is to:

1.  read in a data set, and describe the data set using both words and any supporting information (e.g., tables, etc)
2.  identify what needs to be done to tidy the current data
3.  anticipate the shape of pivoted data
4.  pivot the data into tidy format using `pivot_longer`

## Read in data

Read in one (or more) of the following datasets, using the correct R package and command.

-   animal_weights.csv ⭐
-   eggs_tidy.csv ⭐⭐ or organicpoultry.xls ⭐⭐⭐
-   australian_marriage\*.xlsx ⭐⭐⭐
-   USA Households\*.xlsx ⭐⭐⭐⭐
-   sce_labor_chart_data_public.csv 🌟🌟🌟🌟🌟

```{r}
animal_weight<-read_csv("_data/animal_weight.csv",
                        show_col_types = FALSE)

```

### Briefly describe the data

Describe the data, and be sure to comment on why you are planning to pivot it to make it "tidy"

## Anticipate the End Result

The first step in pivoting the data is to try to come up with a concrete vision of what the end product *should* look like - that way you will know whether or not your pivoting was successful.

One easy way to do this is to think about the dimensions of your current data (tibble, dataframe, or matrix), and then calculate what the dimensions of the pivoted data should be.

Suppose you have a dataset with $n$ rows and $k$ variables. In our example, 3 of the variables are used to identify a case, so you will be pivoting $k-3$ variables into a longer format where the $k-3$ variable names will move into the `names_to` variable and the current values in each of those columns will move into the `values_to` variable. Therefore, we would expect $n * (k-3)$ rows in the pivoted dataframe!

### Example: find current and future data dimensions

Lets see if this works with a simple example.

```{r}
#| tbl-cap: Example

df<-tibble(country = rep(c("Mexico", "USA", "France"),2),
           year = rep(c(1980,1990), 3), 
           trade = rep(c("NAFTA", "NAFTA", "EU"),2),
           outgoing = rnorm(6, mean=1000, sd=500),
           incoming = rlogis(6, location=1000, 
                             scale = 400))
df

#existing rows/cases
nrow(df)

#existing columns/cases
ncol(df)

#expected rows/cases
nrow(df) * (ncol(df)-3)

# expected columns 
3 + 2
```

Or simple example has $n = 6$ rows and $k - 3 = 2$ variables being pivoted, so we expect a new data frame to have $n * 2 = 12$ rows x $3 + 2 = 5$ columns.

## Pivot the Data

Now we will pivot the data, and compare our pivoted data dimensions to the dimensions calculated above as a "sanity" check.

### Example

```{r}
#| tbl-cap: Pivoted Example

df<-pivot_longer(df, col = c(outgoing, incoming),
                 names_to="trade_direction",
                 values_to = "abc")
df
```

Yes, once it is pivoted long, our resulting data are $12x5$ - exactly what we expected!

### Challenge: Pivot the Chosen Data

Document your work here. What will a new "case" be once you have pivoted the data? How does it meet requirements for tidy data?

```{r}

animal_weights <- read_csv('_data/animal_weight.csv')
animal_weights

```

Observed many animals have designated columns. So i will try pivot_longer to compress them into individual rows. lets see how long the dataset will be.

I've used the pivot_longer to convert multiple animal rows to a single column with all the animal names, and all their values are in the 'values' column

```{r}

animal_longer <- animal_weights %>% 
  pivot_longer("Cattle - dairy" : 'Llamas', names_to='All_Animals', values_to='values')

animal_longer
# dim(animal_longer)

```

To the converted dataset, I want to apply pivot_wider to spread out the country names to multiple columns, with its values. Now I ended up with a 16 \* 10 tibble table.

```{r}
animal_longer %>% pivot_wider(names_from='IPCC Area', values_from='values')
```

## Eggs_tidy.csv

```{r}
eggs_tidy <- read_csv('_data/eggs_tidy.csv')
eggs_tidy
```

```{r}
colnames(eggs_tidy)
```

I want to compress everything from 3rd column to the last in a single column with its values included

```{r}
eggs_longer <- eggs_tidy %>% 
  pivot_longer('large_half_dozen':'extra_large_dozen', values_to='Values')
eggs_longer
```

I want to have individual columns for months, hence using pivot_wider()

```{r}
eggs_wider_month <- eggs_longer %>% 
  pivot_wider(names_from='month', values_from = 'Values')
eggs_wider
```

pivot_wider() with year

```{r}
eggs_wider_year <- eggs_longer %>% 
  pivot_wider(names_from='year', values_from='Values')
eggs_wider_year
```

## USA Households

```{r}
usa_households<-read_excel('_data/USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx', skip=5)
usa_households
```

```{r}
ushh_orig <- read_excel("_data/USA Households by Total Money Income, Race, and Hispanic Origin of Householder 1967 to 2019.xlsx",
         skip=5,
         n_max = 352,
         col_names = c("year", "hholds", "del",
                       str_c("income",1:9,sep="_i"),
                       "median_inc", "median_se", 
                       "mean_inc","mean_se")) %>% 
  select(-del)
  ushh_orig 
```

Still figuring out how to read excel sheets.
